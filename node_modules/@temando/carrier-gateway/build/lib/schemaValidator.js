'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ajv = require('ajv');

var _ajv2 = _interopRequireDefault(_ajv);

var _schemaListConfig = require('./schema-list.config.json');

var _schemaListConfig2 = _interopRequireDefault(_schemaListConfig);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var SchemaValidator = function () {
  function SchemaValidator(config) {
    _classCallCheck(this, SchemaValidator);

    this.loadedSchemas = [];

    this.ajv = new _ajv2.default({
      extendRefs: true,
      allErrors: true
    });
    this.loadSchemasFromConfig(config);
  }

  _createClass(SchemaValidator, [{
    key: 'loadSchemasFromConfig',
    value: function loadSchemasFromConfig(config) {
      var _this = this;

      config.schemas.map(function (schemas) {
        return schemas.paths.map(function (schemaPath) {
          var schema = require(`./${schemaPath}`);
          _this.loadedSchemas.push(schema.id);
          _this.ajv.addSchema(schema);
          return true;
        });
      });
    }
  }, {
    key: 'getLoadedSchemas',
    value: function getLoadedSchemas() {
      return this.loadedSchemas;
    }
  }, {
    key: 'addSchemas',
    value: function addSchemas(schemas) {
      var _this2 = this;

      return (Array.isArray(schemas) ? schemas : [schemas]).map(function (schema) {
        return _this2.addSchema(schema);
      });
    }
  }, {
    key: 'addSchema',
    value: function addSchema(schema) {
      try {
        if (!this.loadedSchemas.some(function (testSchema) {
          return testSchema === schema.id;
        })) {
          this.ajv.addSchema(schema);
          this.loadedSchemas.push(schema.id);

          return true;
        }
        return false;
      } catch (e) {
        return false;
      }
    }
  }, {
    key: 'validate',
    value: function validate(schema, document) {
      return {
        valid: this.ajv.validate(schema, document),
        errors: this.ajv.errors
      };
    }
  }]);

  return SchemaValidator;
}();

exports.default = new SchemaValidator(_schemaListConfig2.default);