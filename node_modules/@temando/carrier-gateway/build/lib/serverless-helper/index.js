'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _dotenv = require('dotenv');

var _dotenv2 = _interopRequireDefault(_dotenv);

var _CloudFormation = require('./CloudFormation');

var _CloudFormation2 = _interopRequireDefault(_CloudFormation);

var _index = require('../../index');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Serverless Helpers JS
 */
var ServerlessHelpers = {

  // Load Environment Variables
  loadEnv: function loadEnv() {
    var dirName = __dirname;
    var retry = 6;

    while (!_fs2.default.existsSync(_path2.default.join(dirName, '.env')) && retry > 0) {
      dirName = _path2.default.join(dirName, '..');
      retry -= 1;
    }

    _dotenv2.default.config({
      path: _path2.default.join(dirName, '.env'),
      silent: true
    });
  },

  // Retrieve CF output variables
  // For now has to be called AFTER loadEnv() as we need
  // the SERVERLESS variables to compose the CF stack name.
  CF: _CloudFormation2.default,

  // Shim interacting with Lambda to a callback call
  shimCallback: function shimCallback(method, instrument) {
    return function () {
      var _ref = (0, _bluebird.coroutine)(function* (event, context, callback) {
        _bluebird2.default.onPossiblyUnhandledRejection(function (err) {
          if (instrument) {
            instrument.critical('exception.unhandled', { error: err.message });

            instrument.flush();
          }

          if (process.env.NODE_ENV === 'test') {
            return callback(err, null);
          }

          return context.fail(err.message);
        });

        try {
          var val = yield method(event, context, callback);

          if (instrument) {
            instrument.flush();
          }

          if (process.env.NODE_ENV === 'test') {
            return callback(null, val);
          }

          return context.succeed(val);
        } catch (err) {
          if (instrument) {
            instrument.flush();
          }

          if (process.env.NODE_ENV === 'test') {
            return callback(err, null);
          }

          return context.fail(err.message);
        }
      });

      return function (_x, _x2, _x3) {
        return _ref.apply(this, arguments);
      };
    }();
  }
};

// Export
exports.default = ServerlessHelpers;