'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

exports.default = instrumentalizeIntegrationLambda;

var _InstrumentGatewayClient = require('./InstrumentGatewayClient');

var _InstrumentGatewayClient2 = _interopRequireDefault(_InstrumentGatewayClient);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @deprecated This lib should not care about runtime environments.
 */
function instrumentalizeIntegrationLambda(config, integrationLambda) {
  // stuff from here till function returns are shared among aws lambda calls
  // in cases when booted lambda is reused (check freeze and thaw)

  // initalize instrument library
  const instrumentGatewayClient = new _InstrumentGatewayClient2.default(config);

  // wraps temando developer instrument lambda for instrument gateway hooks
  return function () {
    for (var _len = arguments.length, rest = Array(_len), _key = 0; _key < _len; _key++) {
      rest[_key] = arguments[_key];
    }

    return integrationLambda.apply(undefined, rest.concat([instrumentGatewayClient])).then(response => {
      // close any unterminated timers and flush data
      instrumentGatewayClient.close().flush();

      return response;
    }).catch(error => {
      instrumentGatewayClient.close().flush();

      return _promise2.default.reject(error);
    });
  };
}
module.exports = exports['default'];