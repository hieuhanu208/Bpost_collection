'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _dblite = require('dblite');

var _dblite2 = _interopRequireDefault(_dblite);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var dbpromise = function () {
  function dbpromise(database) {
    _classCallCheck(this, dbpromise);

    this.database = database;
  }

  _createClass(dbpromise, [{
    key: 'query',
    value: function query(_query, params) {
      var db = (0, _dblite2.default)(this.database, '-header').on('close', function () {
        return true;
      });

      return new _bluebird2.default(function (resolve, reject) {
        db.query(_query, params, function (err, rows) {
          db.close();
          if (err) {
            reject(err);
          } else {
            resolve(rows);
          }
        });
      });
    }
  }]);

  return dbpromise;
}();

exports.default = dbpromise;