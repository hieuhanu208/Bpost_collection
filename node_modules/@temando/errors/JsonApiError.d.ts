export interface IJsonApiErrorBody {
    title?: string;
    detail?: string;
    status?: string;
    id?: string;
    code?: string;
    source?: {
        pointer?: string;
    };
    meta?: {};
    links?: {
        about?: string;
    };
}
/**
 * @class JsonApiError.
 *
 * @example
 *
 * // Here we can mutate the base error with an ID
 * JsonApiError.id = "//${service}.temando.com/errors/InternalError+v1";
 *
 * const err = new JsonApiError({ detail: "blah" })
 *
 * err.detail // "blah"
 * err.status // "500"
 * err.title // "Internal Server Error"
 * err.toJSON() // { status: "500", title: "Internal Server Error", detail: "blah", id: "..." }
 *
 * @example
 *
 * // This will have an `id` brought in from the parent JsonApiError.id we set earlier
 * const err = new ValidationError({
 *   code: "InvalidSchema",
 *   meta: { validation: [ "a should equal b" ] }
 * });
 *
 * { ...err } // Will only have the whitelisted props
 *
 */
export declare class JsonApiError extends Error {
    static status: string;
    static code: string;
    static title: string;
    static id: any;
    static detail: any;
    static meta: any;
    static source: any;
    static links: any;
    title: string;
    detail: string;
    status: string;
    id: string;
    code: string;
    source: {
        pointer?: string;
    };
    meta: {};
    links: {
        about?: string;
    };
    toJSON: () => any;
    constructor(input?: string | Error | IJsonApiErrorBody);
}
