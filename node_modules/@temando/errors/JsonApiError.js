"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const props = [
    'id', 'status', 'title', 'code',
    'detail', 'meta', 'source', 'links',
];
/**
 * @class JsonApiError.
 *
 * @example
 *
 * // Here we can mutate the base error with an ID
 * JsonApiError.id = "//${service}.temando.com/errors/InternalError+v1";
 *
 * const err = new JsonApiError({ detail: "blah" })
 *
 * err.detail // "blah"
 * err.status // "500"
 * err.title // "Internal Server Error"
 * err.toJSON() // { status: "500", title: "Internal Server Error", detail: "blah", id: "..." }
 *
 * @example
 *
 * // This will have an `id` brought in from the parent JsonApiError.id we set earlier
 * const err = new ValidationError({
 *   code: "InvalidSchema",
 *   meta: { validation: [ "a should equal b" ] }
 * });
 *
 * { ...err } // Will only have the whitelisted props
 *
 */
class JsonApiError extends Error {
    constructor(input) {
        super(input);
        const staticProps = this.constructor;
        let errorProps;
        // tslint:disable-next-line:prefer-conditional-expression
        if (typeof input === 'string') {
            errorProps = { title: input };
        }
        else if (input instanceof Object && 'message' in input) {
            errorProps = Object.assign({}, input, { title: input.message });
        }
        else {
            errorProps = input || {};
        }
        const error = props.reduce((obj, key) => {
            if (errorProps[key] != null) {
                obj[key] = errorProps[key];
            }
            else if (staticProps[key] != null) {
                obj[key] = staticProps[key];
            }
            this[key] = obj[key];
            return obj;
        }, {});
        Object.defineProperties(this, {
            message: {
                enumerable: false,
                value: `[${error.code || error.status || 'Error'}] ${error.detail || error.title || ''}`,
            },
            toJSON: {
                enumerable: false,
                value: () => error,
            },
        });
        Error.captureStackTrace(this, this.constructor);
    }
}
JsonApiError.status = '500';
JsonApiError.code = 'InternalError';
JsonApiError.title = 'Internal Error';
exports.JsonApiError = JsonApiError;
//# sourceMappingURL=JsonApiError.js.map