"use strict";
// tslint:disable:max-classes-per-file
Object.defineProperty(exports, "__esModule", { value: true });
const JsonApiError_1 = require("./JsonApiError");
exports.JsonApiError = JsonApiError_1.JsonApiError;
/**
 * 4XX
 */
class TemandoError extends JsonApiError_1.JsonApiError {
}
exports.TemandoError = TemandoError;
class BadRequestError extends TemandoError {
}
BadRequestError.status = '400';
BadRequestError.code = 'BadRequestError';
BadRequestError.title = 'Bad Request';
exports.BadRequestError = BadRequestError;
class UnauthorizedError extends TemandoError {
}
UnauthorizedError.status = '401';
UnauthorizedError.code = 'Unauthorized';
UnauthorizedError.title = 'Unauthorized';
exports.UnauthorizedError = UnauthorizedError;
class ForbiddenError extends TemandoError {
}
ForbiddenError.status = '403';
ForbiddenError.code = 'Forbidden';
ForbiddenError.title = 'Forbidden';
exports.ForbiddenError = ForbiddenError;
class NotFoundError extends TemandoError {
}
NotFoundError.status = '404';
NotFoundError.code = 'NotFoundError';
NotFoundError.title = 'Not Found';
exports.NotFoundError = NotFoundError;
class NotAcceptableError extends TemandoError {
}
NotAcceptableError.status = '406';
NotAcceptableError.code = 'NotAcceptableError';
NotAcceptableError.title = 'Not Acceptable Content';
exports.NotAcceptableError = NotAcceptableError;
class UnsupportedError extends TemandoError {
}
UnsupportedError.status = '415';
UnsupportedError.code = 'UnsupportedError';
UnsupportedError.title = 'Unsupported Media Type';
exports.UnsupportedError = UnsupportedError;
class ValidationError extends TemandoError {
}
ValidationError.status = '422';
ValidationError.code = 'ValidationError';
ValidationError.title = 'Validation Error';
exports.ValidationError = ValidationError;
/**
 * 5XX
 */
class InternalError extends TemandoError {
}
exports.InternalError = InternalError;
class NotImplimentedError extends InternalError {
    /**
     * @deprecated `NotImplimentedError` is deprecated and will be removed,
     *  use `NotImplementedError` instead.
     */
    constructor(input) {
        super(input);
        console.warn('`NotImplimentedError` is deprecated and will be removed, use `NotImplementedError` instead.');
    }
}
NotImplimentedError.status = '501';
NotImplimentedError.code = 'NotImplimentedError';
NotImplimentedError.title = 'Not Implimented';
exports.NotImplimentedError = NotImplimentedError;
class NotImplementedError extends InternalError {
}
NotImplementedError.status = '501';
NotImplementedError.code = 'NotImplementedError';
NotImplementedError.title = 'Not Implemented';
exports.NotImplementedError = NotImplementedError;
class UnavaliableError extends InternalError {
    /**
     * @deprecated `UnavaliableError` is deprecated and will be removed,
     *  use `UnavailableError` instead.
     */
    constructor(input) {
        super(input);
        console.warn('`UnavaliableError` is deprecated and will be removed, use `UnavailableError` instead.');
    }
}
UnavaliableError.status = '503';
UnavaliableError.code = 'UnavaliableError';
UnavaliableError.title = 'Unavaliable';
exports.UnavaliableError = UnavaliableError;
class UnavailableError extends InternalError {
}
UnavailableError.status = '503';
UnavailableError.code = 'UnavailableError';
UnavailableError.title = 'Unavailable';
exports.UnavailableError = UnavailableError;
//# sourceMappingURL=index.js.map