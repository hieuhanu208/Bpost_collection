"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var configuration_1 = require("../configuration");
var money_1 = require("./money");
var quote = {
    $schema: 'http://json-schema.org/draft-04/schema#',
    description: 'Quote.',
    type: 'object',
    additionalProperties: false,
    required: [
        'integrationId',
    ],
    properties: {
        integrationId: {
            description: 'Carrier integration ID.',
            type: 'string',
        },
        integrationServiceId: {
            description: 'Carrier service ID within the integration.',
            type: 'string',
        },
        carrierName: {
            description: 'Carrier name.',
            type: 'string',
        },
        serviceName: {
            description: 'Carrier service name.',
            type: 'string',
        },
    },
};
var ineligible = JSON.parse(JSON.stringify(quote));
ineligible.id = configuration_1.default.prefix + "/quote-ineligible#";
ineligible.description = 'Ineligible quote returned by a carrier service.';
ineligible.required = [
    'integrationId',
    'carrierName',
    'reasons',
];
ineligible.properties.reasons = {
    type: 'array',
    items: {
        description: 'Ineligibility reason.',
        type: 'string',
    },
    minItems: 1,
};
var eligible = JSON.parse(JSON.stringify(quote));
eligible.id = configuration_1.default.prefix + "/quote-eligible#";
eligible.description = 'Eligible quote returned by a carrier service.';
eligible.required = [
    'integrationId',
    'integrationServiceId',
    'carrierName',
    'serviceName',
    'shippingTaxInclusiveCharge',
    'pricedAt',
];
eligible.properties.estimatedTransitPeriod = {
    description: 'Estimated quote transit period.',
    type: 'object',
    required: [
        'minimum',
        'maximum',
    ],
    properties: {
        minimum: {
            description: 'Minimum transit time duration in ISO 8601 format.',
            $ref: configuration_1.default.prefix + "/time-duration#",
        },
        maximum: {
            description: 'Maximum transit time duration in ISO 8601 format.',
            $ref: configuration_1.default.prefix + "/time-duration#",
        },
    },
};
eligible.properties.shippingTaxInclusiveCharge = {
    $ref: money_1.default.id,
};
eligible.properties.pricedAt = {
    type: 'string',
    format: 'date-time',
};
var error = JSON.parse(JSON.stringify(quote));
error.id = configuration_1.default.prefix + "/quote-error#";
error.description = 'Error received when retrieving a quote from a carrier integration.';
error.required = [
    'integrationId',
    'carrierName',
];
error.properties.message = {
    type: 'string',
};
error.properties.errors = {
    type: 'array',
};
exports.default = {
    ineligible: ineligible,
    eligible: eligible,
    error: error,
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVvdGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NoZW1hcy9xdW90ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLGtEQUFzQztBQUN0QyxpQ0FBNEI7QUFFNUIsSUFBTSxLQUFLLEdBQUc7SUFDWixPQUFPLEVBQUUseUNBQXlDO0lBQ2xELFdBQVcsRUFBRSxRQUFRO0lBQ3JCLElBQUksRUFBRSxRQUFRO0lBQ2Qsb0JBQW9CLEVBQUUsS0FBSztJQUMzQixRQUFRLEVBQUU7UUFDUixlQUFlO0tBQ2hCO0lBQ0QsVUFBVSxFQUFFO1FBQ1YsYUFBYSxFQUFFO1lBQ2IsV0FBVyxFQUFFLHlCQUF5QjtZQUN0QyxJQUFJLEVBQUUsUUFBUTtTQUNmO1FBQ0Qsb0JBQW9CLEVBQUU7WUFDcEIsV0FBVyxFQUFFLDRDQUE0QztZQUN6RCxJQUFJLEVBQUUsUUFBUTtTQUNmO1FBQ0QsV0FBVyxFQUFFO1lBQ1gsV0FBVyxFQUFFLGVBQWU7WUFDNUIsSUFBSSxFQUFFLFFBQVE7U0FDZjtRQUNELFdBQVcsRUFBRTtZQUNYLFdBQVcsRUFBRSx1QkFBdUI7WUFDcEMsSUFBSSxFQUFFLFFBQVE7U0FDZjtLQUNGO0NBQ0YsQ0FBQztBQUVGLElBQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0FBQ3JELFVBQVUsQ0FBQyxFQUFFLEdBQU0sdUJBQU0sQ0FBQyxNQUFNLHVCQUFvQixDQUFDO0FBQ3JELFVBQVUsQ0FBQyxXQUFXLEdBQUcsaURBQWlELENBQUM7QUFDM0UsVUFBVSxDQUFDLFFBQVEsR0FBRztJQUNwQixlQUFlO0lBQ2YsYUFBYTtJQUNiLFNBQVM7Q0FDVixDQUFDO0FBQ0YsVUFBVSxDQUFDLFVBQVUsQ0FBQyxPQUFPLEdBQUc7SUFDOUIsSUFBSSxFQUFFLE9BQU87SUFDYixLQUFLLEVBQUU7UUFDTCxXQUFXLEVBQUUsdUJBQXVCO1FBQ3BDLElBQUksRUFBRSxRQUFRO0tBQ2Y7SUFDRCxRQUFRLEVBQUUsQ0FBQztDQUNaLENBQUM7QUFFRixJQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztBQUNuRCxRQUFRLENBQUMsRUFBRSxHQUFNLHVCQUFNLENBQUMsTUFBTSxxQkFBa0IsQ0FBQztBQUNqRCxRQUFRLENBQUMsV0FBVyxHQUFHLCtDQUErQyxDQUFDO0FBQ3ZFLFFBQVEsQ0FBQyxRQUFRLEdBQUc7SUFDbEIsZUFBZTtJQUNmLHNCQUFzQjtJQUN0QixhQUFhO0lBQ2IsYUFBYTtJQUNiLDRCQUE0QjtJQUM1QixVQUFVO0NBQ1gsQ0FBQztBQUNGLFFBQVEsQ0FBQyxVQUFVLENBQUMsc0JBQXNCLEdBQUc7SUFDM0MsV0FBVyxFQUFFLGlDQUFpQztJQUM5QyxJQUFJLEVBQUUsUUFBUTtJQUNkLFFBQVEsRUFBRTtRQUNSLFNBQVM7UUFDVCxTQUFTO0tBQ1Y7SUFDRCxVQUFVLEVBQUU7UUFDVixPQUFPLEVBQUU7WUFDUCxXQUFXLEVBQUUsbURBQW1EO1lBQ2hFLElBQUksRUFBSyx1QkFBTSxDQUFDLE1BQU0sb0JBQWlCO1NBQ3hDO1FBQ0QsT0FBTyxFQUFFO1lBQ1AsV0FBVyxFQUFFLG1EQUFtRDtZQUNoRSxJQUFJLEVBQUssdUJBQU0sQ0FBQyxNQUFNLG9CQUFpQjtTQUN4QztLQUNGO0NBQ0YsQ0FBQztBQUNGLFFBQVEsQ0FBQyxVQUFVLENBQUMsMEJBQTBCLEdBQUc7SUFDL0MsSUFBSSxFQUFFLGVBQUssQ0FBQyxFQUFFO0NBQ2YsQ0FBQztBQUNGLFFBQVEsQ0FBQyxVQUFVLENBQUMsUUFBUSxHQUFHO0lBQzdCLElBQUksRUFBRSxRQUFRO0lBQ2QsTUFBTSxFQUFFLFdBQVc7Q0FDcEIsQ0FBQztBQUVGLElBQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0FBQ2hELEtBQUssQ0FBQyxFQUFFLEdBQU0sdUJBQU0sQ0FBQyxNQUFNLGtCQUFlLENBQUM7QUFDM0MsS0FBSyxDQUFDLFdBQVcsR0FBRyxvRUFBb0UsQ0FBQztBQUN6RixLQUFLLENBQUMsUUFBUSxHQUFHO0lBQ2YsZUFBZTtJQUNmLGFBQWE7Q0FDZCxDQUFDO0FBQ0YsS0FBSyxDQUFDLFVBQVUsQ0FBQyxPQUFPLEdBQUc7SUFDekIsSUFBSSxFQUFFLFFBQVE7Q0FDZixDQUFDO0FBQ0YsS0FBSyxDQUFDLFVBQVUsQ0FBQyxNQUFNLEdBQUc7SUFDeEIsSUFBSSxFQUFFLE9BQU87Q0FDZCxDQUFDO0FBRUYsa0JBQWU7SUFDYixVQUFVLFlBQUE7SUFDVixRQUFRLFVBQUE7SUFDUixLQUFLLE9BQUE7Q0FDTixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNvbmZpZyBmcm9tICcuLi9jb25maWd1cmF0aW9uJztcbmltcG9ydCBtb25leSBmcm9tICcuL21vbmV5JztcblxuY29uc3QgcXVvdGUgPSB7XG4gICRzY2hlbWE6ICdodHRwOi8vanNvbi1zY2hlbWEub3JnL2RyYWZ0LTA0L3NjaGVtYSMnLFxuICBkZXNjcmlwdGlvbjogJ1F1b3RlLicsXG4gIHR5cGU6ICdvYmplY3QnLFxuICBhZGRpdGlvbmFsUHJvcGVydGllczogZmFsc2UsXG4gIHJlcXVpcmVkOiBbXG4gICAgJ2ludGVncmF0aW9uSWQnLFxuICBdLFxuICBwcm9wZXJ0aWVzOiB7XG4gICAgaW50ZWdyYXRpb25JZDoge1xuICAgICAgZGVzY3JpcHRpb246ICdDYXJyaWVyIGludGVncmF0aW9uIElELicsXG4gICAgICB0eXBlOiAnc3RyaW5nJyxcbiAgICB9LFxuICAgIGludGVncmF0aW9uU2VydmljZUlkOiB7XG4gICAgICBkZXNjcmlwdGlvbjogJ0NhcnJpZXIgc2VydmljZSBJRCB3aXRoaW4gdGhlIGludGVncmF0aW9uLicsXG4gICAgICB0eXBlOiAnc3RyaW5nJyxcbiAgICB9LFxuICAgIGNhcnJpZXJOYW1lOiB7XG4gICAgICBkZXNjcmlwdGlvbjogJ0NhcnJpZXIgbmFtZS4nLFxuICAgICAgdHlwZTogJ3N0cmluZycsXG4gICAgfSxcbiAgICBzZXJ2aWNlTmFtZToge1xuICAgICAgZGVzY3JpcHRpb246ICdDYXJyaWVyIHNlcnZpY2UgbmFtZS4nLFxuICAgICAgdHlwZTogJ3N0cmluZycsXG4gICAgfSxcbiAgfSxcbn07XG5cbmNvbnN0IGluZWxpZ2libGUgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHF1b3RlKSk7XG5pbmVsaWdpYmxlLmlkID0gYCR7Y29uZmlnLnByZWZpeH0vcXVvdGUtaW5lbGlnaWJsZSNgO1xuaW5lbGlnaWJsZS5kZXNjcmlwdGlvbiA9ICdJbmVsaWdpYmxlIHF1b3RlIHJldHVybmVkIGJ5IGEgY2FycmllciBzZXJ2aWNlLic7XG5pbmVsaWdpYmxlLnJlcXVpcmVkID0gW1xuICAnaW50ZWdyYXRpb25JZCcsXG4gICdjYXJyaWVyTmFtZScsXG4gICdyZWFzb25zJyxcbl07XG5pbmVsaWdpYmxlLnByb3BlcnRpZXMucmVhc29ucyA9IHtcbiAgdHlwZTogJ2FycmF5JyxcbiAgaXRlbXM6IHtcbiAgICBkZXNjcmlwdGlvbjogJ0luZWxpZ2liaWxpdHkgcmVhc29uLicsXG4gICAgdHlwZTogJ3N0cmluZycsXG4gIH0sXG4gIG1pbkl0ZW1zOiAxLFxufTtcblxuY29uc3QgZWxpZ2libGUgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHF1b3RlKSk7XG5lbGlnaWJsZS5pZCA9IGAke2NvbmZpZy5wcmVmaXh9L3F1b3RlLWVsaWdpYmxlI2A7XG5lbGlnaWJsZS5kZXNjcmlwdGlvbiA9ICdFbGlnaWJsZSBxdW90ZSByZXR1cm5lZCBieSBhIGNhcnJpZXIgc2VydmljZS4nO1xuZWxpZ2libGUucmVxdWlyZWQgPSBbXG4gICdpbnRlZ3JhdGlvbklkJyxcbiAgJ2ludGVncmF0aW9uU2VydmljZUlkJyxcbiAgJ2NhcnJpZXJOYW1lJyxcbiAgJ3NlcnZpY2VOYW1lJyxcbiAgJ3NoaXBwaW5nVGF4SW5jbHVzaXZlQ2hhcmdlJyxcbiAgJ3ByaWNlZEF0Jyxcbl07XG5lbGlnaWJsZS5wcm9wZXJ0aWVzLmVzdGltYXRlZFRyYW5zaXRQZXJpb2QgPSB7XG4gIGRlc2NyaXB0aW9uOiAnRXN0aW1hdGVkIHF1b3RlIHRyYW5zaXQgcGVyaW9kLicsXG4gIHR5cGU6ICdvYmplY3QnLFxuICByZXF1aXJlZDogW1xuICAgICdtaW5pbXVtJyxcbiAgICAnbWF4aW11bScsXG4gIF0sXG4gIHByb3BlcnRpZXM6IHtcbiAgICBtaW5pbXVtOiB7XG4gICAgICBkZXNjcmlwdGlvbjogJ01pbmltdW0gdHJhbnNpdCB0aW1lIGR1cmF0aW9uIGluIElTTyA4NjAxIGZvcm1hdC4nLFxuICAgICAgJHJlZjogYCR7Y29uZmlnLnByZWZpeH0vdGltZS1kdXJhdGlvbiNgLFxuICAgIH0sXG4gICAgbWF4aW11bToge1xuICAgICAgZGVzY3JpcHRpb246ICdNYXhpbXVtIHRyYW5zaXQgdGltZSBkdXJhdGlvbiBpbiBJU08gODYwMSBmb3JtYXQuJyxcbiAgICAgICRyZWY6IGAke2NvbmZpZy5wcmVmaXh9L3RpbWUtZHVyYXRpb24jYCxcbiAgICB9LFxuICB9LFxufTtcbmVsaWdpYmxlLnByb3BlcnRpZXMuc2hpcHBpbmdUYXhJbmNsdXNpdmVDaGFyZ2UgPSB7XG4gICRyZWY6IG1vbmV5LmlkLFxufTtcbmVsaWdpYmxlLnByb3BlcnRpZXMucHJpY2VkQXQgPSB7XG4gIHR5cGU6ICdzdHJpbmcnLFxuICBmb3JtYXQ6ICdkYXRlLXRpbWUnLFxufTtcblxuY29uc3QgZXJyb3IgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHF1b3RlKSk7XG5lcnJvci5pZCA9IGAke2NvbmZpZy5wcmVmaXh9L3F1b3RlLWVycm9yI2A7XG5lcnJvci5kZXNjcmlwdGlvbiA9ICdFcnJvciByZWNlaXZlZCB3aGVuIHJldHJpZXZpbmcgYSBxdW90ZSBmcm9tIGEgY2FycmllciBpbnRlZ3JhdGlvbi4nO1xuZXJyb3IucmVxdWlyZWQgPSBbXG4gICdpbnRlZ3JhdGlvbklkJyxcbiAgJ2NhcnJpZXJOYW1lJyxcbl07XG5lcnJvci5wcm9wZXJ0aWVzLm1lc3NhZ2UgPSB7XG4gIHR5cGU6ICdzdHJpbmcnLFxufTtcbmVycm9yLnByb3BlcnRpZXMuZXJyb3JzID0ge1xuICB0eXBlOiAnYXJyYXknLFxufTtcblxuZXhwb3J0IGRlZmF1bHQge1xuICBpbmVsaWdpYmxlLFxuICBlbGlnaWJsZSxcbiAgZXJyb3IsXG59O1xuIl19