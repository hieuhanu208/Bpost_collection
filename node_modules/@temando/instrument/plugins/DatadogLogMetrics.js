"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Logs metrics to console as per the DataDog StatsD format.
 *
 * @see https://www.datadoghq.com/blog/statsd/
 * @see https://docs.datadoghq.com/integrations/awslambda/
 *
 * e.g MONITORING|unix_epoch_timestamp|value|metric_type|my.metric.name|#tag1:value,tag2
 *
 * @param events
 */
class DatadogLogMetrics {
    constructor(events) {
        events.on('metric', (metric, tags = {}) => {
            let type;
            let value;
            if (typeof metric.increment !== 'undefined') {
                type = 'count';
                value = metric.increment;
            }
            else if (typeof metric.gauge !== 'undefined') {
                type = 'gauge';
                value = metric.gauge;
            }
            else if (typeof metric.histogram !== 'undefined') {
                type = 'histogram';
                value = metric.histogram;
            }
            else {
                return; // don't support this metric type.
            }
            // DataDog doesn't like decimals.
            const timestamp = Math.floor(new Date(metric.occurredAt).getTime() / 1000);
            const tagPairs = [
                ['origin', metric.origin],
                ...Object.keys(tags).map((key) => [key, tags[key]]),
            ].map(([key, val]) => val != null ? `${key}:${val}` : key).join(',');
            const msg = `MONITORING|${timestamp}|${value}|${type}|${metric.name}|#${tagPairs}`;
            // tslint:disable-next-line:no-console
            console.log(msg);
        });
    }
}
exports.default = DatadogLogMetrics;
//# sourceMappingURL=DatadogLogMetrics.js.map