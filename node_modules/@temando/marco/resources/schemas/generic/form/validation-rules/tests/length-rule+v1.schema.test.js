const Ajv = require('ajv');
const chai = require('chai');
chai.use(require('dirty-chai'));
const expect = chai.expect;

const messageV1Schema = require('../../../message+v1.schema.json');
const lengthValidationSchema =
  require('../length-rule+v1.schema.json');
const exactlengthValidationSchema =
  require('../exact-length-rule+v1.schema.json');
const minlengthValidationSchema =
  require('../minimum-length-rule+v1.schema.json');
const maxlengthValidationSchema =
  require('../maximum-length-rule+v1.schema.json');

const ajv = new Ajv();

ajv.addSchema(messageV1Schema);
ajv.addSchema(lengthValidationSchema, 'lengthValidation');
ajv.addSchema(exactlengthValidationSchema);
ajv.addSchema(minlengthValidationSchema);
ajv.addSchema(maxlengthValidationSchema);

describe('Testing length schema', function() {
  it('should valid when having rule name `length` and `exact` length rule', function() {
    const isValid = ajv.validate('lengthValidation', {
      rule: 'length',
      exact: 4,
      messages: {
        notExact: { messageKey: "key"}
      }
    });

    if (!isValid) console.error(ajv.errors);

    expect(isValid).to.be.ok();
  });

  it('should valid when having rule name `length` and `minimum` length rule', function() {
    const isValid = ajv.validate('lengthValidation', {
      rule: 'length',
      minimum: 4,
      messages: {
        tooShort: { messageKey: "key"}
      }
    });

    if (!isValid) console.error(ajv.errors);

    expect(isValid).to.be.ok();
  });

  it('should valid when having rule name `length` and `maximum` length rule', function() {
    const isValid = ajv.validate('lengthValidation', {
      rule: 'length',
      maximum: 4,
      messages: {
        tooLong: { messageKey: "key"}
      }
    });

    if (!isValid) console.error(ajv.errors);

    expect(isValid).to.be.ok();
  });

  it('should valid when combining `minimum` and `maximum` rules', function() {
    const isValid = ajv.validate('lengthValidation', {
      "rule": "length",
      "minimum": 5,
      "maximum": 20,
      "messages": {
        "tooLong": {
          "messageKey": "form.string.tooLong"
        },
        "tooShort": {
          "messageKey": "form.string.tooShort"
        }
      }
    });

    if (!isValid) console.error(ajv.errors);

    expect(isValid).to.be.ok();
  });

  it('should invalid when missing rule name `length`', function() {
    const isValid = ajv.validate('lengthValidation', {
      maximum: 4,
      messages: {
        tooLong: { messageKey: "key"}
      }
    });

    if (isValid) throw new Error('Should not be valid, should throw `rule` required')

    expect(ajv.errors[0].message).to.be.equal('should have required property \'rule\'');
  });

  it('should invalid when partially match subschema', function() {
    // Work out this one... dependatant validation rules approach for length
    const isValid = ajv.validate('lengthValidation', {
      rule: 'length',
      minimum: 4,
      maximum: 10,
      messages: {
        tooShort: { messageKey: "key"}
      }
    });

    const expectedMessage = 'should match exactly one schema in oneOf';
    if (isValid) throw new Error('Should not be valid, should error: ' + expectedMessage);

    expect(ajv.errors[0].message).to.be.equal(expectedMessage);
  });
});
