const Ajv = require('ajv');
const chai = require('chai');
chai.use(require('dirty-chai'));
const expect = chai.expect;

const messageV1Schema = require('../../../message+v1.schema.json');
const minlengthValidationSchema =
  require('../minimum-length-rule+v1.schema.json');

const ajv = new Ajv();

ajv.addSchema(messageV1Schema);
ajv.addSchema(minlengthValidationSchema, 'minLengthValidation');

describe('Testing minimum length schema', function() {
  it('should be valid when having minimum and tooShort message', function() {
    const isValid = ajv.validate('minLengthValidation', {
      "rule": "length",
      "minimum": 5,
      "messages": {
        "tooShort": {
          "messageKey": "form.string.tooShort"
        }
      }
    });

    if (!isValid) console.log(ajv.errors);

    expect(isValid).to.be.ok();
  });

  it('should be valid and not care about other properties and message keys', function() {
    const isValid = ajv.validate('minLengthValidation', {
      "minimum": 5,
      "randomProperty": "for sure ignore",
      "messages": {
        "tooShort": {
          "messageKey": "form.string.tooLong"
        },
        "someRandomKeyToIgnore": "yes please ignore"
      }
    });

    if (!isValid) console.log(ajv.errors);

    expect(isValid).to.be.ok();
  });

  it('should be invalid when having no minimum defined', function() {
    const isValid = ajv.validate('minLengthValidation', {
    });

    expect(ajv.errors[0].message).to.be.equal('should have required property \'minimum\'');
  });

  it('should be invalid when having minimum and no messages', function() {
    const isValid = ajv.validate('minLengthValidation', {
      "minimum": 5
    });

    expect(ajv.errors[0].message).to.be.equal('should have required property \'messages\'');
  });

  it('should be invalid when having minimum and not tooShort message', function() {
    const isValid = ajv.validate('minLengthValidation', {
      "minimum": 5,
      "messages": {
      }
    });

    expect(ajv.errors[0].message).to.be.equal('should have required property \'tooShort\'');
  });
});
