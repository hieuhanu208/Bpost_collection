const Ajv = require('ajv');
const chai = require('chai');
chai.use(require('dirty-chai'));
const expect = chai.expect;

const messageV1Schema = require('../../../message+v1.schema.json');
const numberValidationSchema =
  require('../number-rule+v1.schema.json');

const ajv = new Ajv();

ajv.addSchema(messageV1Schema);
ajv.addSchema(numberValidationSchema, 'numberValidationSchema');

describe('Testing number validation schema', function() {
  it('should be valid when having all fields defined', function() {
    const isValid = ajv.validate('numberValidationSchema', {
      "rule": "number",
      "greaterThan": 0,
      "messages": {
        "greaterThan": {
          "messageKey": "form.number.mustBeGreaterThan"
        }
      }
    });

    if (!isValid) console.error(ajv.errors);

    expect(isValid).to.be.ok();
  });

  it('should be invalid when having additional properties', function() {
    const isValid = ajv.validate('numberValidationSchema', {
      "rule": "number",
      "greaterThan": 0,
      "message": {
        "notANumber": {
          "messageKey": "form.number.notANumber"
        },
        "greaterThan": {
          "messageKey": "form.number.mustBeGreaterThan"
        }
      }
    });

    const expectedError = 'should NOT have additional properties';
    if (isValid) throw new Error(`Error it should fail with ${expectedError}`);

    expect(ajv.errors[0].message).to.be.equal(expectedError);
  });

  it('should be invalid when having additional properties in messages', function() {
    const isValid = ajv.validate('numberValidationSchema', {
      "rule": "number",
      "greaterThan": 0,
      "message": {
        "greaterThan": {
          "messageKey": "form.number.mustBeGreaterThan"
        }
      }
    });

    const expectedError = 'should NOT have additional properties';
    if (isValid) throw new Error(`Error it should fail with ${expectedError}`);

    expect(ajv.errors[0].message).to.be.equal(expectedError);
  });
});
