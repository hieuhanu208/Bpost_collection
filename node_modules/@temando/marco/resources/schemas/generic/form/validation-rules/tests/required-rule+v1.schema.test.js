const Ajv = require('ajv');
const chai = require('chai');
chai.use(require('dirty-chai'));
const expect = chai.expect;

const messageV1Schema = require('../../../message+v1.schema.json');
const requiredValidationSchema =
  require('../required-rule+v1.schema.json');

const ajv = new Ajv();

ajv.addSchema(messageV1Schema);
ajv.addSchema(requiredValidationSchema, 'requiredValidation');

describe('Testing required validation schema', function() {
  it('should be valid when having all fields defined', function() {
    const isValid = ajv.validate('requiredValidation', {
      "rule": "required",
      "messages": {
        "required": {
          "messageKey": "form.common.required" 
        }
      }
    });

    if (!isValid) console.error(ajv.errors);

    expect(isValid).to.be.ok();
  });

  it('should be invalid when having additional properties', function() {
    const isValid = ajv.validate('requiredValidation', {
      "rule": "required",
      "shouldFail": "becauseOfThisProperty",
      "messages": {
        "required": {
          "messageKey": "form.common.required" 
        }
      }
    });

    const expectedError = 'should NOT have additional properties';
    if (isValid) throw new Error(`Error it should fail with ${expectedError}`);

    expect(ajv.errors[0].message).to.be.equal(expectedError);
  });

  it('should be invalid when having additional properties in messages', function() {
    const isValid = ajv.validate('requiredValidation', {
      "rule": "required",
      "messages": {
        "shouldFail": "becauseOfThisProperty",
        "required": {
          "messageKey": "form.common.required" 
        }
      }
    });

    const expectedError = 'should NOT have additional properties';
    if (isValid) throw new Error(`Error it should fail with ${expectedError}`);

    expect(ajv.errors[0].message).to.be.equal(expectedError);
  });
});
