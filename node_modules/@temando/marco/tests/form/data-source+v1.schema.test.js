const Ajv = require('ajv');
const chai = require('chai');
chai.use(require('dirty-chai'));
const expect = chai.expect;

const httpRequestSchema = require('../../resources/schemas/generic/http-request/http-request+v1.schema.json');
const transformSchema = require('../../resources/schemas/generic/transform/transform+v1.schema.json');
const dataSourceValidationSchema =
  require('../../resources/schemas/generic/form/data-source+v1.schema.json');

const ajv = new Ajv();

ajv.addSchema(httpRequestSchema);
ajv.addSchema(transformSchema);
ajv.addSchema(dataSourceValidationSchema, 'dataSourceSchema');

describe('Testing data source schema', function() {
  it('should be valid when having all fields defined', function() {
    const isValid = ajv.validate('dataSourceSchema', {
      "trigger": {
        "event": "onload"
      },
      "httpRequest": {
        "url": "https://example.com/industry/{locale}",
        "method": "GET"
      }
    });

    if (!isValid) console.error(ajv.errors);

    expect(isValid).to.be.ok();
  });

  it('should be valid when trigger/controlId omitted', function() {
    const isValid = ajv.validate('dataSourceSchema', {
      "trigger": {
        "event": "onchange"
      },
      "httpRequest": {
        "url": "https://example.com/countries/{countryCode}/states/{locale}",
        "method": "GET"
      }
    });

    if (!isValid) console.error(ajv.errors);

    expect(isValid).to.be.ok();
  });

  it('should be invalid when additional properties added', function() {
    const isValid = ajv.validate('dataSourceSchema', {
      "fail": "becase of this",
      "trigger": {
        "event": "onchange"
      },
      "httpRequest": {
        "url": "https://example.com/countries/{countryCode}/states/{locale}",
        "method": "GET"
      }
    });

    const errorMessage = "should NOT have additional properties";
    if (isValid) throw new Error(`Error! It must fail with ${errorMessage}`);

    expect(ajv.errors[0].message).to.be.equal(errorMessage);
  });
});
