'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = packageMate;

var _convertUnits = require('convert-units');

var _convertUnits2 = _interopRequireDefault(_convertUnits);

var _clone = require('clone');

var _clone2 = _interopRequireDefault(_clone);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Pollyfill array includes method if required.
/**
 * PackageMate extends Temando generic package object that and allows one to
 * normalize its weight and dimension units to a variety of other metrics. It
 * takes a package as an argument, clones the object then augments it with some
 * convenience methods for performing weight/dimension conversion.
 *
 * @author    Jason Wijegooneratne <jason.wijegooenratne@temando.com>
 * @date      14-June-2016
 * @copyright Temando Pty Ltd
 */

if (!Array.prototype.includes) {
  Array.prototype.includes = function (searchElement) {
    var O = Object(this);
    var len = parseInt(O.length, 10) || 0;
    var n = parseInt(arguments.length <= 2 ? undefined : arguments[2], 10) || 0;
    var k = void 0;
    var currentElement = void 0;

    if (len === 0) {
      return false;
    }

    if (n >= 0) {
      k = n;
    } else {
      k = len + n;
      if (k < 0) {
        k = 0;
      }
    }

    while (k < len) {
      currentElement = O[k];
      if (searchElement === currentElement || searchElement !== searchElement && currentElement !== currentElement) {
        // NaN !== NaN
        return true;
      }
      k++;
    }
    return false;
  };
}

/**
 * Takes a temando package and augments it with some helper methods.
 *
 * @param {object} aPackage - A temando package object literal.
 * @returns {object} An augmented temando package object literal.
 */
function packageMate(aPackage) {
  var r = {};
  var pkg = (0, _clone2.default)(aPackage, true);

  pkg.normaliseDimensions = function (metric) {
    if (pkg.hasOwnProperty('dimensions')) {
      try {
        var baseUnit = r.normaliseDimensionMetric(pkg.dimensions.unit);
        var conversionUnit = r.normaliseDimensionMetric(metric);

        pkg.dimensions.length = parseFloat((0, _convertUnits2.default)(pkg.dimensions.length).from(baseUnit).to(conversionUnit).toFixed(2));

        pkg.dimensions.width = parseFloat((0, _convertUnits2.default)(pkg.dimensions.width).from(baseUnit).to(conversionUnit).toFixed(2));

        pkg.dimensions.height = parseFloat((0, _convertUnits2.default)(pkg.dimensions.height).from(baseUnit).to(conversionUnit).toFixed(2));

        pkg.dimensions.unit = metric;
      } catch (e) {
        throw new Error('Some elements in the dimensions set are missing');
      }
    } else {
      throw new Error('Package object does not have its dimensions set');
    }

    return pkg;
  };

  r.normaliseDimensionMetric = function (metric) {
    var metrics = [{ unit: ['mm', 'millimeter', 'millimetre'], map: 'mm' }, { unit: ['cm', 'centimeter', 'centimetre'], map: 'cm' }, { unit: ['m', 'meter', 'metre'], map: 'm' }, { unit: ['ft', 'foot', 'feet'], map: 'ft' }, { unit: ['in', 'inch'], map: 'in' }, { unit: ['yd', 'yard'], map: 'yd' }];
    var conversion = false;

    metrics.forEach(function (m) {
      if (m.unit.includes(metric.toLowerCase())) {
        conversion = m.map;
      }
    });

    if (conversion === false) {
      throw new Error('unknown dimension metric: ' + metric);
    }

    return conversion;
  };

  pkg.normaliseWeight = function (metric) {
    if (pkg.hasOwnProperty('grossWeight')) {
      if (!pkg.grossWeight.unit) {
        throw new Error('Weight unit is required');
      }
      var baseUnit = r.normaliseWeightMetric(pkg.grossWeight.unit);
      var conversionUnit = r.normaliseWeightMetric(metric);

      pkg.grossWeight.amount = parseFloat((0, _convertUnits2.default)(pkg.grossWeight.amount).from(baseUnit).to(conversionUnit));

      pkg.grossWeight.unit = metric;
    } else {
      throw new Error('Package object does not have its grossWeight set');
    }

    return pkg;
  };

  r.normaliseWeightMetric = function (metric) {
    var metrics = [{ unit: ['g', 'gram'], map: 'g' }, { unit: ['kg', 'kilogram'], map: 'kg' }, { unit: ['lb', 'pound'], map: 'lb' }, { unit: ['oz', 'ounce'], map: 'oz' }];

    var conversion = false;

    metrics.forEach(function (m) {
      if (m.unit.includes(metric.toLowerCase())) {
        conversion = m.map;
      }
    });

    if (conversion === false) {
      throw new Error('unknown weight metric: ' + metric);
    }

    return conversion;
  };

  return pkg;
}
module.exports = exports['default'];