"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
class Integration {
    constructor(serviceRegistry, log, definitionId) {
        this.serviceRegistry = serviceRegistry;
        this.definitionId = definitionId;
        this.log = log;
    }
    getDeployment(region) {
        return __awaiter(this, void 0, void 0, function* () {
            let deployment;
            this.log(`Retrieving deployment details for ${this.definitionId}...`);
            try {
                const entry = yield this.serviceRegistry.catalog().get(this.definitionId);
                if (entry.deployments.length > 0) {
                    deployment = entry.deployments.find((carrierDeployment) => carrierDeployment.region === region);
                }
                else {
                    this.log(`No deployment information found for ${this.definitionId}`);
                }
            }
            catch (error) {
                throw new Error(error);
            }
            if (!deployment) {
                throw new Error(`No deployment information found for ${this.definitionId}`);
            }
            return deployment;
        });
    }
    getIntegrationDetails(serviceClient) {
        return __awaiter(this, void 0, void 0, function* () {
            let result;
            let responseBody;
            this.log('Retrieving integration details');
            try {
                result = yield serviceClient.request(`/integrations/${this.definitionId}/integration`, {
                    method: 'GET',
                    headers: {
                        'Accept': 'application/vnd.api+json',
                        'Content-Type': 'application/vnd.api+json',
                    },
                });
                responseBody = yield result.json();
            }
            catch (error) {
                throw new Error(error);
            }
            if (result.status !== 200) {
                this.log('Error Retrieving Integration Details');
                const stringBody = JSON.stringify(responseBody);
                this.log(stringBody);
                throw new Error(`Error retrieving integration details: ${stringBody}`);
            }
            return responseBody;
        });
    }
    getMarcoDetails(serviceClient) {
        return __awaiter(this, void 0, void 0, function* () {
            let result;
            let responseBody;
            this.log(`Retrieving marco details`);
            try {
                result = yield serviceClient.request(`/integrations/${this.definitionId}/integration/marco`, {
                    method: 'GET',
                    headers: {
                        'Accept': 'application/vnd.api+json',
                        'Content-Type': 'application/vnd.api+json',
                    },
                });
                responseBody = yield result.json();
            }
            catch (error) {
                throw new Error(error);
            }
            if (result.status !== 200) {
                this.log('Error Retrieving Marco Details');
                const stringBody = JSON.stringify(responseBody);
                this.log(stringBody);
                throw new Error(`Error retrieving marco: ${stringBody}`);
            }
            return responseBody;
        });
    }
    generatePayload(serviceClient, endpoint) {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                data: {
                    type: 'carrier-integration',
                    attributes: {
                        integration: yield this.getIntegrationDetails(serviceClient),
                        marco: yield this.getMarcoDetails(serviceClient),
                        endpoint,
                    },
                },
            };
        });
    }
}
exports.Integration = Integration;
//# sourceMappingURL=Integration.js.map