"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const Bluebird = require("bluebird");
const publish_1 = require("./publish");
// tslint:disable-next-line:no-default-export
function default_1(S) {
    const SCli = require(S.getServerlessPath('utils/cli'));
    class TemandoCarrierService extends S.classes.Plugin {
        constructor() {
            super();
            this.name = 'TemandoCarrierService'; // Define your plugin's name
        }
        /**
         *
         * @returns Promise
         */
        registerActions() {
            S.addAction(this.publishAction.bind(this), {
                handler: 'publishAction',
                description: 'Publish a carrier integration with the carrier service.',
                context: 'carrier-service',
                contextAction: 'publish',
                options: [{
                        option: 'stage',
                        shortcut: 's',
                        description: 'Optional if only one stage is defined in project',
                    },
                    {
                        option: 'region',
                        shortcut: 'r',
                        description: 'Target one region to deploy to',
                    }],
                parameters: [
                    {
                        parameter: 'paths',
                        description: 'One or multiple paths to your function',
                        position: '0->',
                    },
                ],
            });
            return Bluebird.resolve();
        }
        /**
         * Publishes a payload to the carrier-service publish lambda
         *
         * @returns Promise
         */
        publishAction(e) {
            return __awaiter(this, void 0, void 0, function* () {
                SCli.log('startCarrierServicePublish');
                if (e.options.stage === null || e.options.region === null) {
                    throw new Error('Please supply the stage and region with the -s and -r parameters');
                }
                return yield this.publishPayload(e);
            });
        }
        publishPayload(e) {
            return __awaiter(this, void 0, void 0, function* () {
                const { region, stage } = e.options;
                SCli.log(`Using Stage ${stage}, Region: ${region}`);
                return publish_1.publish(region, stage, SCli.log);
            });
        }
    }
    return TemandoCarrierService;
}
exports.default = default_1;
//# sourceMappingURL=TemandoCarrierService-0.5.js.map