"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const service_registry_lib_1 = require("@temando/service-registry-lib");
const utils_1 = require("@temando/service-client-factory/utils");
const utils_2 = require("./utils");
const Integration_1 = require("./Integration");
const service_client_factory_1 = require("@temando/service-client-factory");
exports.sendRequest = (payload, carrierServiceClient, log) => __awaiter(this, void 0, void 0, function* () {
    const request = {
        method: 'POST',
        headers: {
            'Content-Type': 'application/vnd.api+json',
            'Accept': 'application/vnd.api+json',
        },
        body: JSON.stringify(payload),
    };
    log('Registering integration to /carriers');
    let result;
    let responseBody;
    try {
        result = yield carrierServiceClient.request('/carriers', request);
        responseBody = yield result.json();
    }
    catch (error) {
        throw new Error(error);
    }
    if (result.status !== 201) {
        const stringBody = JSON.stringify(responseBody);
        log('Error Publishing Integration Details');
        log(stringBody);
        throw new Error(`Error Publishing Integration Details: ${stringBody}`);
    }
    log('Successfully registered carrier integration to Carrier Service.');
    return responseBody;
});
exports.publish = (region, stage, log) => __awaiter(this, void 0, void 0, function* () {
    const sovereignty = utils_2.getSovereignty(region);
    const accountId = utils_2.getTemandoAccountId();
    const code = utils_2.getCode();
    const tsDefinition = utils_1.getServiceDefinition('ts-definition.json');
    /**
     * Get the deployment details of the carrier integration
     */
    const integration = new Integration_1.Integration(new service_registry_lib_1.Registry(stage, 's3'), log, tsDefinition.id);
    const deployment = yield integration.getDeployment(region);
    /**
     * Create a new service client factory, register the
     * integration with it, and create a service client
     * so we can send standardised requests to it
     */
    const serviceClientFactory = new service_client_factory_1.ServiceClientFactory({
        callDepth: 1,
        tsDefinition,
        tsEnv: utils_1.getServiceEnv('ts-env.json'),
    });
    serviceClientFactory.registerService({
        serviceName: tsDefinition.id,
        currentRegion: region,
        deployments: [deployment],
    });
    const integrationClient = serviceClientFactory.create({
        name: tsDefinition.id,
        config: {
            sovereignty,
            accountId,
            code,
        },
    });
    /**
     * Generate the JSON payload that will be sent to Carrier Service /carriers endpoint
     * to publish this integration
     */
    const payload = yield integration.generatePayload(integrationClient, deployment.endpoint);
    return exports.sendRequest(payload, serviceClientFactory.create({
        name: 'temando-carrier-service',
        config: {
            sovereignty,
            accountId,
            code,
        },
    }), log);
});
//# sourceMappingURL=publish.js.map