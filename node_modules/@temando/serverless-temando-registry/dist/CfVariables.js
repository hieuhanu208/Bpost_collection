'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

require('babel-polyfill');

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fsPromise = require('fs-promise');

var _fsPromise2 = _interopRequireDefault(_fsPromise);

var _lutils = require('lutils');

var _jsYaml = require('js-yaml');

var _jsYaml2 = _interopRequireDefault(_jsYaml);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Enumerates `keys`, reducing a pointer in `data`
 * Consumes undefined or bad paths silently
 *
 * @param {Array} keys
 * @param {Object} data
 * @return {any}
 * @return {undefined} When invalid pointer
 */
function getPointer(keys, data) {
  return keys.reduce(function (pointer, key) {
    if (_lutils.typeOf.Object(pointer) || _lutils.typeOf.Array(pointer)) {
      return pointer[key];
    }

    return undefined;
  }, data);
}

var CfVariables = function () {
  function CfVariables(_ref) {
    var yaml = _ref.yaml,
        aws = _ref.aws,
        _ref$storagePath = _ref.storagePath,
        storagePath = _ref$storagePath === undefined ? './serverless.env.yml' : _ref$storagePath,
        servicePath = _ref.servicePath,
        region = _ref.region,
        stage = _ref.stage,
        _ref$log = _ref.log,
        log = _ref$log === undefined ? function () {} : _ref$log;
    (0, _classCallCheck3.default)(this, CfVariables);

    this.yaml = yaml;
    this.aws = aws;

    this.region = region;
    this.stage = stage;

    this.storagePath = _path2.default.resolve(servicePath, storagePath);
    this.slsYmlPath = _path2.default.resolve(servicePath, 'serverless.yml');

    this.varPath = 'cf';
    this.envKey = 'cf-environment';

    this.log = log;
  }

  (0, _createClass3.default)(CfVariables, [{
    key: 'initialize',
    value: function () {
      var _ref2 = (0, _bluebird.coroutine)(_regenerator2.default.mark(function _callee() {
        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!this.initialized) {
                  _context.next = 2;
                  break;
                }

                return _context.abrupt('return');

              case 2:
                _context.next = 4;
                return this.parse();

              case 4:
                _context.next = 6;
                return this.loadStore();

              case 6:

                this.initialized = true;

              case 7:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function initialize() {
        return _ref2.apply(this, arguments);
      }

      return initialize;
    }()

    /**
     * Parses cf-environment mappings from `serverless.yml`
     *
     * @returns this
     */

  }, {
    key: 'parse',
    value: function () {
      var _ref3 = (0, _bluebird.coroutine)(_regenerator2.default.mark(function _callee2() {
        var _this = this;

        var mappings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

        var slsYml, providerEnv, _mappings;

        return _regenerator2.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                this.mappings = mappings;

                _context2.next = 3;
                return this.yaml.parse(this.slsYmlPath);

              case 3:
                slsYml = _context2.sent;
                providerEnv = slsYml.provider && slsYml.provider[this.envKey];


                if (providerEnv) {
                  (_mappings = this.mappings).push.apply(_mappings, (0, _toConsumableArray3.default)(this.parseEnvMap(providerEnv, { definedAt: ['provider'] })));
                }

                if (slsYml.functions) {
                  (0, _keys2.default)(slsYml.functions).forEach(function (fnKey) {
                    var fnConfig = slsYml.functions[fnKey];
                    var fnEnv = fnConfig && fnConfig[_this.envKey];

                    if (fnEnv) {
                      var _mappings2;

                      (_mappings2 = _this.mappings).push.apply(_mappings2, (0, _toConsumableArray3.default)(_this.parseEnvMap(fnEnv, { definedAt: ['functions', fnKey] })));
                    }
                  });
                }

                return _context2.abrupt('return', this);

              case 8:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function parse() {
        return _ref3.apply(this, arguments);
      }

      return parse;
    }()
  }, {
    key: 'parseEnvMap',
    value: function parseEnvMap(envMap, mappingTemplate) {
      return envMap.map(function (definition) {
        var mapping = (0, _extends3.default)({}, mappingTemplate);

        if (_lutils.typeOf.String(definition)) {
          /**
           * cf-environment:
           *   - myKeyName
           */

          mapping.cfKey = definition;
          mapping.key = definition;
        } else if (_lutils.typeOf.Object(definition)) {
          /**
           * cf-environment:
           *   - FOO: bar
           */

          var firstKey = (0, _keys2.default)(definition)[0];
          mapping.cfKey = definition[firstKey];
          mapping.key = firstKey;
        } else {
          throw new Error('Invalid cf definition type - must be a string or dict');
        }

        return mapping;
      });
    }

    /**
     * Loads in variables from a storage file
     */

  }, {
    key: 'loadStore',
    value: function () {
      var _ref4 = (0, _bluebird.coroutine)(_regenerator2.default.mark(function _callee3() {
        var store, definedAt, selected;
        return _regenerator2.default.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                store = void 0;

                if (_fsPromise2.default.existsSync(this.storagePath)) {
                  _context3.next = 5;
                  break;
                }

                store = {};
                _context3.next = 8;
                break;

              case 5:
                _context3.next = 7;
                return this.yaml.parse(this.storagePath);

              case 7:
                store = _context3.sent;

              case 8:
                definedAt = [this.varPath, this.stage, this.region];

                // Used to ensure store maintains reference to `selected` for updates

                selected = definedAt.reduce(function (pointer, key) {
                  if (!pointer[key]) pointer[key] = {};
                  return pointer[key];
                }, store);


                this.store = {
                  definedAt,
                  data: store,

                  // Selected will be at `cf[stage][region]` {}
                  selected
                };

                return _context3.abrupt('return', this);

              case 12:
              case 'end':
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function loadStore() {
        return _ref4.apply(this, arguments);
      }

      return loadStore;
    }()
  }, {
    key: 'saveStore',
    value: function () {
      var _ref5 = (0, _bluebird.coroutine)(_regenerator2.default.mark(function _callee4() {
        var stringified;
        return _regenerator2.default.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                stringified = _jsYaml2.default.dump(this.store.data);
                return _context4.abrupt('return', _fsPromise2.default.writeFile(this.storagePath, stringified));

              case 2:
              case 'end':
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function saveStore() {
        return _ref5.apply(this, arguments);
      }

      return saveStore;
    }()
  }, {
    key: 'updateStore',
    value: function updateStore(data) {
      return (0, _lutils.merge)(this.store.selected, data);
    }
  }, {
    key: 'getStoreVar',
    value: function getStoreVar(cfKey) {
      return this.store.selected[cfKey];
    }
  }, {
    key: 'populateEnvironments',
    value: function populateEnvironments(config) {
      var _this2 = this;

      this.mappings.forEach(function (_ref6) {
        var definedAt = _ref6.definedAt,
            key = _ref6.key,
            cfKey = _ref6.cfKey;

        var parent = getPointer(definedAt, config);
        parent.environment = parent.environment || {};
        parent.environment[key] = _this2.getStoreVar(cfKey);
      });
    }
  }, {
    key: 'updateLambdaEnvironments',
    value: function () {
      var _ref7 = (0, _bluebird.coroutine)(_regenerator2.default.mark(function _callee6(config) {
        var _this3 = this;

        var cfVars = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.store.selected;
        return _regenerator2.default.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                _context6.next = 2;
                return _bluebird2.default.map((0, _keys2.default)(config.functions), function () {
                  var _ref8 = (0, _bluebird.coroutine)(_regenerator2.default.mark(function _callee5(fnName) {
                    var stored, mappedEnv, baseEnvironment, environment;
                    return _regenerator2.default.wrap(function _callee5$(_context5) {
                      while (1) {
                        switch (_context5.prev = _context5.next) {
                          case 0:
                            stored = {};
                            mappedEnv = _this3.mappings.reduce(function (obj, _ref9) {
                              var definedAt = _ref9.definedAt,
                                  key = _ref9.key,
                                  cfKey = _ref9.cfKey;

                              if (definedAt[0] === 'functions' && definedAt[1] === fnName || definedAt[0] === 'provider') {
                                stored[key] = _this3.getStoreVar(cfKey);
                                obj[key] = cfVars[cfKey];
                              }

                              return obj;
                            }, {});
                            baseEnvironment = (0, _lutils.merge)((0, _lutils.clone)(config.provider.environment || {}), (0, _lutils.clone)(config.functions[fnName].environment || {}));
                            environment = (0, _lutils.merge)((0, _lutils.clone)(baseEnvironment || {}), mappedEnv);

                            /**
                             * Determines if there have been any changes
                             */

                            if (!((0, _stringify2.default)(environment) === (0, _stringify2.default)(baseEnvironment))) {
                              _context5.next = 6;
                              break;
                            }

                            return _context5.abrupt('return');

                          case 6:

                            _this3.log(`[ENVIRONMENT] Updating deployed function '${fnName}' environment`);

                            _context5.next = 9;
                            return _this3.aws.request('Lambda', 'updateFunctionConfiguration', {
                              FunctionName: config.functions[fnName].name,
                              Environment: {
                                Variables: environment
                              }
                            });

                          case 9:
                          case 'end':
                            return _context5.stop();
                        }
                      }
                    }, _callee5, _this3);
                  }));

                  return function (_x4) {
                    return _ref8.apply(this, arguments);
                  };
                }());

              case 2:
              case 'end':
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      function updateLambdaEnvironments(_x2) {
        return _ref7.apply(this, arguments);
      }

      return updateLambdaEnvironments;
    }()
  }]);
  return CfVariables;
}();

exports.default = CfVariables;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9DZlZhcmlhYmxlcy5qcyJdLCJuYW1lcyI6WyJnZXRQb2ludGVyIiwia2V5cyIsImRhdGEiLCJyZWR1Y2UiLCJwb2ludGVyIiwia2V5IiwiT2JqZWN0IiwiQXJyYXkiLCJ1bmRlZmluZWQiLCJDZlZhcmlhYmxlcyIsInlhbWwiLCJhd3MiLCJzdG9yYWdlUGF0aCIsInNlcnZpY2VQYXRoIiwicmVnaW9uIiwic3RhZ2UiLCJsb2ciLCJyZXNvbHZlIiwic2xzWW1sUGF0aCIsInZhclBhdGgiLCJlbnZLZXkiLCJpbml0aWFsaXplZCIsInBhcnNlIiwibG9hZFN0b3JlIiwibWFwcGluZ3MiLCJzbHNZbWwiLCJwcm92aWRlckVudiIsInByb3ZpZGVyIiwicHVzaCIsInBhcnNlRW52TWFwIiwiZGVmaW5lZEF0IiwiZnVuY3Rpb25zIiwiZm9yRWFjaCIsImZuS2V5IiwiZm5Db25maWciLCJmbkVudiIsImVudk1hcCIsIm1hcHBpbmdUZW1wbGF0ZSIsIm1hcCIsImRlZmluaXRpb24iLCJtYXBwaW5nIiwiU3RyaW5nIiwiY2ZLZXkiLCJmaXJzdEtleSIsIkVycm9yIiwic3RvcmUiLCJleGlzdHNTeW5jIiwic2VsZWN0ZWQiLCJzdHJpbmdpZmllZCIsImR1bXAiLCJ3cml0ZUZpbGUiLCJjb25maWciLCJwYXJlbnQiLCJlbnZpcm9ubWVudCIsImdldFN0b3JlVmFyIiwiY2ZWYXJzIiwiZm5OYW1lIiwic3RvcmVkIiwibWFwcGVkRW52Iiwib2JqIiwiYmFzZUVudmlyb25tZW50IiwicmVxdWVzdCIsIkZ1bmN0aW9uTmFtZSIsIm5hbWUiLCJFbnZpcm9ubWVudCIsIlZhcmlhYmxlcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7OztBQUNBOzs7O0FBRUE7O0FBQ0E7Ozs7OztBQUVBOzs7Ozs7Ozs7QUFTQSxTQUFTQSxVQUFULENBQW9CQyxJQUFwQixFQUEwQkMsSUFBMUIsRUFBZ0M7QUFDOUIs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ZXMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJ2JhYmVsLXBvbHlmaWxsJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IGZzcCBmcm9tICdmcy1wcm9taXNlJztcbmltcG9ydCBQcm9taXNlIGZyb20gJ2JsdWViaXJkJztcbmltcG9ydCB7IHR5cGVPZiwgbWVyZ2UsIGNsb25lIH0gZnJvbSAnbHV0aWxzJztcbmltcG9ydCBZQU1MIGZyb20gJ2pzLXlhbWwnO1xuXG4vKipcbiAqIEVudW1lcmF0ZXMgYGtleXNgLCByZWR1Y2luZyBhIHBvaW50ZXIgaW4gYGRhdGFgXG4gKiBDb25zdW1lcyB1bmRlZmluZWQgb3IgYmFkIHBhdGhzIHNpbGVudGx5XG4gKlxuICogQHBhcmFtIHtBcnJheX0ga2V5c1xuICogQHBhcmFtIHtPYmplY3R9IGRhdGFcbiAqIEByZXR1cm4ge2FueX1cbiAqIEByZXR1cm4ge3VuZGVmaW5lZH0gV2hlbiBpbnZhbGlkIHBvaW50ZXJcbiAqL1xuZnVuY3Rpb24gZ2V0UG9pbnRlcihrZXlzLCBkYXRhKSB7XG4gIHJldHVybiBrZXlzLnJlZHVjZSgocG9pbnRlciwga2V5KSA9PiB7XG4gICAgaWYgKHR5cGVPZi5PYmplY3QocG9pbnRlcikgfHwgdHlwZU9mLkFycmF5KHBvaW50ZXIpKSB7XG4gICAgICByZXR1cm4gcG9pbnRlcltrZXldO1xuICAgIH1cblxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH0sIGRhdGEpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDZlZhcmlhYmxlcyB7XG4gIGNvbnN0cnVjdG9yKHtcbiAgICB5YW1sLCAvLyBzZXJ2ZXJsZXNzLnlhbWxQYXJzZXJcbiAgICBhd3MsIC8vIHNlcnZlcmxlc3MucHJvdmlkZXJzLmF3cyAtIFNlcnZlcmxlc3MnIHByaW1lZCBBV1Mgc2RrIGluc3RhbmNlXG5cbiAgICBzdG9yYWdlUGF0aCA9ICcuL3NlcnZlcmxlc3MuZW52LnltbCcsIC8vIFJlbGF0aXZlIHRvIGBzZXJ2aWNlUGF0aGBcbiAgICBzZXJ2aWNlUGF0aCwgLy8gc2VydmVybGVzcy5jb25maWcuc2VydmljZVBhdGhcbiAgICByZWdpb24sIC8vIHNlcnZlcmxlc3Muc2VydmljZS5wcm92aWRlci5yZWdpb25cbiAgICBzdGFnZSwgLy8gc2VydmVybGVzcy5zZXJ2aWNlLnByb3ZpZGVyLnN0YWdlXG5cbiAgICBsb2cgPSAoKSA9PiB7fSwgLy8gTG9nZ2luZyBmdW5jdGlvblxuICB9KSB7XG4gICAgdGhpcy55YW1sID0geWFtbDtcbiAgICB0aGlzLmF3cyA9IGF3cztcblxuICAgIHRoaXMucmVnaW9uID0gcmVnaW9uO1xuICAgIHRoaXMuc3RhZ2UgPSBzdGFnZTtcblxuICAgIHRoaXMuc3RvcmFnZVBhdGggPSBwYXRoLnJlc29sdmUoc2VydmljZVBhdGgsIHN0b3JhZ2VQYXRoKTtcbiAgICB0aGlzLnNsc1ltbFBhdGggPSBwYXRoLnJlc29sdmUoc2VydmljZVBhdGgsICdzZXJ2ZXJsZXNzLnltbCcpO1xuXG4gICAgdGhpcy52YXJQYXRoID0gJ2NmJztcbiAgICB0aGlzLmVudktleSA9ICdjZi1lbnZpcm9ubWVudCc7XG5cbiAgICB0aGlzLmxvZyA9IGxvZztcbiAgfVxuXG5cbiAgYXN5bmMgaW5pdGlhbGl6ZSgpIHtcbiAgICBpZiAodGhpcy5pbml0aWFsaXplZCkgcmV0dXJuO1xuXG4gICAgYXdhaXQgdGhpcy5wYXJzZSgpO1xuICAgIGF3YWl0IHRoaXMubG9hZFN0b3JlKCk7XG5cbiAgICB0aGlzLmluaXRpYWxpemVkID0gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQYXJzZXMgY2YtZW52aXJvbm1lbnQgbWFwcGluZ3MgZnJvbSBgc2VydmVybGVzcy55bWxgXG4gICAqXG4gICAqIEByZXR1cm5zIHRoaXNcbiAgICovXG4gIGFzeW5jIHBhcnNlKG1hcHBpbmdzID0gW10pIHtcbiAgICB0aGlzLm1hcHBpbmdzID0gbWFwcGluZ3M7XG5cbiAgICBjb25zdCBzbHNZbWwgPSBhd2FpdCB0aGlzLnlhbWwucGFyc2UodGhpcy5zbHNZbWxQYXRoKTtcblxuICAgIGNvbnN0IHByb3ZpZGVyRW52ID0gc2xzWW1sLnByb3ZpZGVyICYmIHNsc1ltbC5wcm92aWRlclt0aGlzLmVudktleV07XG5cbiAgICBpZiAocHJvdmlkZXJFbnYpIHtcbiAgICAgIHRoaXMubWFwcGluZ3MucHVzaCguLi50aGlzLnBhcnNlRW52TWFwKHByb3ZpZGVyRW52LCB7IGRlZmluZWRBdDogWydwcm92aWRlciddIH0pKTtcbiAgICB9XG5cbiAgICBpZiAoc2xzWW1sLmZ1bmN0aW9ucykge1xuICAgICAgT2JqZWN0LmtleXMoc2xzWW1sLmZ1bmN0aW9ucykuZm9yRWFjaCgoZm5LZXkpID0+IHtcbiAgICAgICAgY29uc3QgZm5Db25maWcgPSBzbHNZbWwuZnVuY3Rpb25zW2ZuS2V5XTtcbiAgICAgICAgY29uc3QgZm5FbnYgPSBmbkNvbmZpZyAmJiBmbkNvbmZpZ1t0aGlzLmVudktleV07XG5cbiAgICAgICAgaWYgKGZuRW52KSB7XG4gICAgICAgICAgdGhpcy5tYXBwaW5ncy5wdXNoKC4uLnRoaXMucGFyc2VFbnZNYXAoZm5FbnYsIHsgZGVmaW5lZEF0OiBbJ2Z1bmN0aW9ucycsIGZuS2V5XSB9KSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgcGFyc2VFbnZNYXAoZW52TWFwLCBtYXBwaW5nVGVtcGxhdGUpIHtcbiAgICByZXR1cm4gZW52TWFwLm1hcCgoZGVmaW5pdGlvbikgPT4ge1xuICAgICAgY29uc3QgbWFwcGluZyA9IHsgLi4ubWFwcGluZ1RlbXBsYXRlIH07XG5cbiAgICAgIGlmICh0eXBlT2YuU3RyaW5nKGRlZmluaXRpb24pKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBjZi1lbnZpcm9ubWVudDpcbiAgICAgICAgICogICAtIG15S2V5TmFtZVxuICAgICAgICAgKi9cblxuICAgICAgICBtYXBwaW5nLmNmS2V5ID0gZGVmaW5pdGlvbjtcbiAgICAgICAgbWFwcGluZy5rZXkgPSBkZWZpbml0aW9uO1xuICAgICAgfSBlbHNlXG4gICAgICBpZiAodHlwZU9mLk9iamVjdChkZWZpbml0aW9uKSkge1xuICAgICAgICAvKipcbiAgICAgICAgICogY2YtZW52aXJvbm1lbnQ6XG4gICAgICAgICAqICAgLSBGT086IGJhclxuICAgICAgICAgKi9cblxuICAgICAgICBjb25zdCBmaXJzdEtleSA9IE9iamVjdC5rZXlzKGRlZmluaXRpb24pWzBdO1xuICAgICAgICBtYXBwaW5nLmNmS2V5ID0gZGVmaW5pdGlvbltmaXJzdEtleV07XG4gICAgICAgIG1hcHBpbmcua2V5ID0gZmlyc3RLZXk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgY2YgZGVmaW5pdGlvbiB0eXBlIC0gbXVzdCBiZSBhIHN0cmluZyBvciBkaWN0Jyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBtYXBwaW5nO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIExvYWRzIGluIHZhcmlhYmxlcyBmcm9tIGEgc3RvcmFnZSBmaWxlXG4gICAqL1xuICBhc3luYyBsb2FkU3RvcmUoKSB7XG4gICAgbGV0IHN0b3JlO1xuICAgIGlmICghZnNwLmV4aXN0c1N5bmModGhpcy5zdG9yYWdlUGF0aCkpIHtcbiAgICAgIHN0b3JlID0ge307XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0b3JlID0gYXdhaXQgdGhpcy55YW1sLnBhcnNlKHRoaXMuc3RvcmFnZVBhdGgpO1xuICAgIH1cblxuICAgIGNvbnN0IGRlZmluZWRBdCA9IFt0aGlzLnZhclBhdGgsIHRoaXMuc3RhZ2UsIHRoaXMucmVnaW9uXTtcblxuICAgIC8vIFVzZWQgdG8gZW5zdXJlIHN0b3JlIG1haW50YWlucyByZWZlcmVuY2UgdG8gYHNlbGVjdGVkYCBmb3IgdXBkYXRlc1xuICAgIGNvbnN0IHNlbGVjdGVkID0gZGVmaW5lZEF0LnJlZHVjZSgocG9pbnRlciwga2V5KSA9PiB7XG4gICAgICBpZiAoIXBvaW50ZXJba2V5XSkgcG9pbnRlcltrZXldID0ge307XG4gICAgICByZXR1cm4gcG9pbnRlcltrZXldO1xuICAgIH0sIHN0b3JlKTtcblxuICAgIHRoaXMuc3RvcmUgPSB7XG4gICAgICBkZWZpbmVkQXQsXG4gICAgICBkYXRhOiBzdG9yZSxcblxuICAgICAgLy8gU2VsZWN0ZWQgd2lsbCBiZSBhdCBgY2Zbc3RhZ2VdW3JlZ2lvbl1gIHt9XG4gICAgICBzZWxlY3RlZCxcbiAgICB9O1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBhc3luYyBzYXZlU3RvcmUoKSB7XG4gICAgY29uc3Qgc3RyaW5naWZpZWQgPSBZQU1MLmR1bXAodGhpcy5zdG9yZS5kYXRhKTtcblxuICAgIHJldHVybiBmc3Aud3JpdGVGaWxlKHRoaXMuc3RvcmFnZVBhdGgsIHN0cmluZ2lmaWVkKTtcbiAgfVxuXG4gIHVwZGF0ZVN0b3JlKGRhdGEpIHtcbiAgICByZXR1cm4gbWVyZ2UodGhpcy5zdG9yZS5zZWxlY3RlZCwgZGF0YSk7XG4gIH1cblxuICBnZXRTdG9yZVZhcihjZktleSkge1xuICAgIHJldHVybiB0aGlzLnN0b3JlLnNlbGVjdGVkW2NmS2V5XTtcbiAgfVxuXG4gIHBvcHVsYXRlRW52aXJvbm1lbnRzKGNvbmZpZykge1xuICAgIHRoaXMubWFwcGluZ3MuZm9yRWFjaCgoeyBkZWZpbmVkQXQsIGtleSwgY2ZLZXkgfSkgPT4ge1xuICAgICAgY29uc3QgcGFyZW50ID0gZ2V0UG9pbnRlcihkZWZpbmVkQXQsIGNvbmZpZyk7XG4gICAgICBwYXJlbnQuZW52aXJvbm1lbnQgPSBwYXJlbnQuZW52aXJvbm1lbnQgfHwge307XG4gICAgICBwYXJlbnQuZW52aXJvbm1lbnRba2V5XSA9IHRoaXMuZ2V0U3RvcmVWYXIoY2ZLZXkpO1xuICAgIH0pO1xuICB9XG5cbiAgYXN5bmMgdXBkYXRlTGFtYmRhRW52aXJvbm1lbnRzKGNvbmZpZywgY2ZWYXJzID0gdGhpcy5zdG9yZS5zZWxlY3RlZCkge1xuICAgIGF3YWl0IFByb21pc2UubWFwKE9iamVjdC5rZXlzKGNvbmZpZy5mdW5jdGlvbnMpLCBhc3luYyAoZm5OYW1lKSA9PiB7XG4gICAgICBjb25zdCBzdG9yZWQgPSB7fTtcbiAgICAgIGNvbnN0IG1hcHBlZEVudiA9IHRoaXMubWFwcGluZ3MucmVkdWNlKChvYmosIHsgZGVmaW5lZEF0LCBrZXksIGNmS2V5IH0pID0+IHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIChkZWZpbmVkQXRbMF0gPT09ICdmdW5jdGlvbnMnICYmXG4gICAgICAgICAgZGVmaW5lZEF0WzFdID09PSBmbk5hbWUpIHx8XG4gICAgICAgICAgKGRlZmluZWRBdFswXSA9PT0gJ3Byb3ZpZGVyJylcbiAgICAgICAgKSB7XG4gICAgICAgICAgc3RvcmVkW2tleV0gPSB0aGlzLmdldFN0b3JlVmFyKGNmS2V5KTtcbiAgICAgICAgICBvYmpba2V5XSA9IGNmVmFyc1tjZktleV07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gb2JqO1xuICAgICAgfSwge30pO1xuXG4gICAgICBjb25zdCBiYXNlRW52aXJvbm1lbnQgPSBtZXJnZShcbiAgICAgICAgY2xvbmUoY29uZmlnLnByb3ZpZGVyLmVudmlyb25tZW50IHx8IHt9KSxcbiAgICAgICAgY2xvbmUoY29uZmlnLmZ1bmN0aW9uc1tmbk5hbWVdLmVudmlyb25tZW50IHx8IHt9KSxcbiAgICAgICk7XG5cbiAgICAgIGNvbnN0IGVudmlyb25tZW50ID0gbWVyZ2UoXG4gICAgICAgIGNsb25lKGJhc2VFbnZpcm9ubWVudCB8fCB7fSksXG4gICAgICAgIG1hcHBlZEVudixcbiAgICAgICk7XG5cbiAgICAgIC8qKlxuICAgICAgICogRGV0ZXJtaW5lcyBpZiB0aGVyZSBoYXZlIGJlZW4gYW55IGNoYW5nZXNcbiAgICAgICAqL1xuICAgICAgaWYgKEpTT04uc3RyaW5naWZ5KGVudmlyb25tZW50KSA9PT0gSlNPTi5zdHJpbmdpZnkoYmFzZUVudmlyb25tZW50KSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRoaXMubG9nKGBbRU5WSVJPTk1FTlRdIFVwZGF0aW5nIGRlcGxveWVkIGZ1bmN0aW9uICcke2ZuTmFtZX0nIGVudmlyb25tZW50YCk7XG5cbiAgICAgIGF3YWl0IHRoaXMuYXdzLnJlcXVlc3QoJ0xhbWJkYScsICd1cGRhdGVGdW5jdGlvbkNvbmZpZ3VyYXRpb24nLCB7XG4gICAgICAgIEZ1bmN0aW9uTmFtZTogY29uZmlnLmZ1bmN0aW9uc1tmbk5hbWVdLm5hbWUsXG4gICAgICAgIEVudmlyb25tZW50OiB7XG4gICAgICAgICAgVmFyaWFibGVzOiBlbnZpcm9ubWVudCxcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbn1cbiJdfQ==