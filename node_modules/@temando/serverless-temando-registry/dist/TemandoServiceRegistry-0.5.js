'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _getIterator2 = require('babel-runtime/core-js/get-iterator');

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

exports.default = function (S) {
  // eslint-disable-next-line global-require, import/no-dynamic-require
  var SCli = require(S.getServerlessPath('utils/cli'));

  // eslint-disable-next-line no-extend-native
  String.prototype.lowercaseFirst = function lowercaseFirst() {
    return this.charAt(0).toLowerCase() + this.slice(1);
  };

  var PluginTemandoServiceRegistry = function (_S$classes$Plugin) {
    (0, _inherits3.default)(PluginTemandoServiceRegistry, _S$classes$Plugin);

    function PluginTemandoServiceRegistry() {
      (0, _classCallCheck3.default)(this, PluginTemandoServiceRegistry);

      var _this = (0, _possibleConstructorReturn3.default)(this, (PluginTemandoServiceRegistry.__proto__ || (0, _getPrototypeOf2.default)(PluginTemandoServiceRegistry)).call(this));

      _this.name = 'TemandoServiceRegistry';
      return _this;
    }

    (0, _createClass3.default)(PluginTemandoServiceRegistry, [{
      key: 'registerActions',
      value: function registerActions() {
        S.addAction(this.updateRegistry.bind(this), {
          handler: 'registryUpdate',
          description: 'Update the Temando Registry',
          context: 'registry',
          contextAction: 'update',
          options: [{
            option: 'stage',
            shortcut: 's',
            description: 'Optional if only one stage is defined in project'
          }, {
            option: 'region',
            shortcut: 'r',
            description: 'Target one region to deploy to'
          }, {
            option: 'version',
            shortcut: 'v',
            description: 'The version being deployment'
          }],
          parameters: []
        });
      }
    }, {
      key: 'registerHooks',
      value: function registerHooks() {
        S.addHook(this.postResourceDeploy.bind(this), {
          action: 'resourcesDeploy',
          event: 'post'
        });
      }
    }, {
      key: 'updateRegistry',
      value: function () {
        var _ref = (0, _bluebird.coroutine)(_regenerator2.default.mark(function _callee(e) {
          return _regenerator2.default.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  if (!(!S.config.interactive || e.options.stage && e.options.region)) {
                    _context.next = 2;
                    break;
                  }

                  return _context.abrupt('return', this.startRegistryUpdate(e));

                case 2:
                  _context.next = 4;
                  return this.cliPromptSelectStage('Which stage are you updating: ', e.options.stage, false);

                case 4:
                  e.options.stage = _context.sent;
                  _context.next = 7;
                  return this.cliPromptSelectRegion('Which region are you updating: ', false, true, e.options.region, e.options.stage);

                case 7:
                  e.options.region = _context.sent;
                  return _context.abrupt('return', this.startRegistryUpdate(e));

                case 9:
                case 'end':
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function updateRegistry(_x) {
          return _ref.apply(this, arguments);
        }

        return updateRegistry;
      }()
    }, {
      key: 'postResourceDeploy',
      value: function () {
        var _ref2 = (0, _bluebird.coroutine)(_regenerator2.default.mark(function _callee2(e) {
          return _regenerator2.default.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  if (!(!S.config.interactive || e.options.stage && e.options.region)) {
                    _context2.next = 2;
                    break;
                  }

                  return _context2.abrupt('return', this.setVariablesFromOutput(e));

                case 2:
                  _context2.next = 4;
                  return this.cliPromptSelectStage('Which stage are you updating: ', e.options.stage, false);

                case 4:
                  e.options.stage = _context2.sent;
                  _context2.next = 7;
                  return this.cliPromptSelectRegion('Which region are you updating: ', false, true, e.options.region, e.options.stage);

                case 7:
                  e.options.region = _context2.sent;
                  return _context2.abrupt('return', this.setVariablesFromOutput(e));

                case 9:
                case 'end':
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function postResourceDeploy(_x2) {
          return _ref2.apply(this, arguments);
        }

        return postResourceDeploy;
      }()
    }, {
      key: 'setVariablesFromOutput',
      value: function () {
        var _ref3 = (0, _bluebird.coroutine)(_regenerator2.default.mark(function _callee4(e) {
          var _this2 = this;

          var settings, cf, result, stack, sProject, events, streamEvents, awsLambda, awsAccountId;
          return _regenerator2.default.wrap(function _callee4$(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  SCli.log('Set serverless variables from CloudFormation Outputs....');

                  // eslint-disable-next-line no-underscore-dangle
                  settings = S._project.getVariablesObject(e.options.stage, e.options.region);
                  cf = _bluebird2.default.promisifyAll(new _awsSdk2.default.CloudFormation({
                    region: settings.region
                  }));
                  _context4.next = 5;
                  return cf.describeStacksAsync({
                    StackName: settings.resourcesStackName || `${settings.project}-${settings.stage}-r`
                  });

                case 5:
                  result = _context4.sent;

                  if (!(result.Stacks.length < 1)) {
                    _context4.next = 8;
                    break;
                  }

                  throw new Error('Could not get CloudFormation stack information - ' + 'unable to set serverless variables');

                case 8:
                  stack = result.Stacks.pop();

                  // eslint-disable-next-line no-underscore-dangle

                  sProject = S._project.getRegion(e.options.stage, e.options.region);


                  if (Array.isArray(stack.Outputs)) {
                    stack.Outputs.forEach(function (output) {
                      var outputVar = {};
                      var key = output.OutputKey.lowercaseFirst();
                      outputVar[key] = output.OutputValue;

                      sProject.addVariables(outputVar);
                      SCli.log(`Set serverless variables "${key}" to "${outputVar[key]}"`);
                    });
                    sProject.save();
                    SCli.log('Successfully set variable(s) from outputs.');
                  } else {
                    SCli.log('CloudFormation has no Output.');
                  }

                  // eslint-disable-next-line no-underscore-dangle
                  events = S._project.getAllEvents();

                  if (!Array.isArray(events)) {
                    _context4.next = 24;
                    break;
                  }

                  streamEvents = events.filter(function (event) {
                    return event.type === 'dynamodbstream' || event.type === 'kinesisstream';
                  });

                  if (!(streamEvents.length === 0)) {
                    _context4.next = 18;
                    break;
                  }

                  SCli.log('No events with type: dynamodbstream, kinesisstream.');
                  _context4.next = 24;
                  break;

                case 18:
                  awsLambda = _bluebird2.default.promisifyAll(new _awsSdk2.default.Lambda({
                    region: settings.region
                  }), { suffix: 'Asynced' });
                  awsAccountId = S.getProvider().getAccountId(settings.stage, settings.region);
                  _context4.next = 22;
                  return _bluebird2.default.all(streamEvents.map(function () {
                    var _ref4 = (0, _bluebird.coroutine)(_regenerator2.default.mark(function _callee3(event) {
                      var populated, functionArn, eventMapping, eventVar, eventDetail, key;
                      return _regenerator2.default.wrap(function _callee3$(_context3) {
                        while (1) {
                          switch (_context3.prev = _context3.next) {
                            case 0:
                              // Get Event Details
                              populated = event.toObjectPopulated(settings);
                              // eslint-disable-next-line max-len

                              functionArn = `arn:aws:lambda:${settings.region}:${awsAccountId}:function:${settings.project}-${event.getFunction().name}:${settings.stage}`;
                              _context3.next = 4;
                              return awsLambda.listEventSourceMappingsAsynced({
                                FunctionName: functionArn,
                                EventSourceArn: populated.config.streamArn,
                                // With assumption that each function only subscribe to the same stream once
                                MaxItems: 1
                              });

                            case 4:
                              eventMapping = _context3.sent;
                              eventVar = {};

                              // Set variable using first result if exist

                              if (typeof eventMapping !== 'undefined' && Array.isArray(eventMapping.EventSourceMappings) && eventMapping.EventSourceMappings.length > 0) {
                                eventDetail = eventMapping.EventSourceMappings[0];
                                key = `eventID:${populated.name}`;


                                eventVar[key] = eventDetail.UUID;
                                sProject.addVariables(eventVar);
                                SCli.log(`Set serverless variables "${key}" to "${eventVar[key]}"`);
                              }

                              return _context3.abrupt('return', eventVar);

                            case 8:
                            case 'end':
                              return _context3.stop();
                          }
                        }
                      }, _callee3, _this2);
                    }));

                    return function (_x4) {
                      return _ref4.apply(this, arguments);
                    };
                  }()));

                case 22:
                  sProject.save();
                  SCli.log('Successfully set variable(s) from stream events.');

                case 24:
                  return _context4.abrupt('return', e);

                case 25:
                case 'end':
                  return _context4.stop();
              }
            }
          }, _callee4, this);
        }));

        function setVariablesFromOutput(_x3) {
          return _ref3.apply(this, arguments);
        }

        return setVariablesFromOutput;
      }()
    }, {
      key: 'getServiceDefinitionPath',
      value: function getServiceDefinitionPath() {
        // Get projectPath
        var projectPath = S.config.projectPath;

        // Check if ts-definition.json exists or whether there's an alternative config
        var cust = S.getProject().custom;
        var configPath = void 0;

        try {
          _fs2.default.accessSync(`${projectPath}/ts-definition.json`, _fs2.default.R_OK);
          configPath = `${projectPath}/ts-definition.json`;
        } catch (e) {
          configPath = false;
        }

        if (!configPath && cust && cust.temandoRegistry && cust.temandoRegistry.serviceDefinition) {
          try {
            _fs2.default.accessSync(`${projectPath}/${cust.temandoRegistry.serviceDefinition}`, _fs2.default.R_OK);
            configPath = `${projectPath}/${cust.temandoRegistry.serviceDefinition}`;
          } catch (e) {
            configPath = false;
          }
        }

        if (!configPath) {
          return false;
        }

        return configPath;
      }
    }, {
      key: 'startRegistryUpdate',
      value: function () {
        var _ref5 = (0, _bluebird.coroutine)(_regenerator2.default.mark(function _callee5(e) {
          var definitionPath, settings, provider, apiGateway, endpoint, cf, result, stack, r, serviceDefinition, cfVars, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, output, interpolator, updatedDefinition, deployment;

          return _regenerator2.default.wrap(function _callee5$(_context5) {
            while (1) {
              switch (_context5.prev = _context5.next) {
                case 0:
                  SCli.log('startRegistryUpdate');
                  definitionPath = this.getServiceDefinitionPath();
                  // console.log(definitionPath);

                  if (definitionPath) {
                    _context5.next = 5;
                    break;
                  }

                  SCli.log('Skipping Temando Service Registry update - no service definition found');
                  return _context5.abrupt('return', e);

                case 5:

                  /* eslint-disable no-underscore-dangle*/
                  settings = S._project.getVariablesObject(e.options.stage, e.options.region);
                  /* eslint-enable no-underscore-dangle */

                  // Get API Gateway details

                  provider = S.getProvider('aws');
                  _context5.next = 9;
                  return provider.getApiByName(settings.project, e.options.stage, e.options.region);

                case 9:
                  apiGateway = _context5.sent;


                  // Build endpoint uri
                  endpoint = `https://${apiGateway.id}.execute-api.${e.options.region}.amazonaws.com/${e.options.stage}`;
                  cf = _bluebird2.default.promisifyAll(new _awsSdk2.default.CloudFormation({
                    region: settings.region
                  }));
                  _context5.next = 14;
                  return cf.describeStacksAsync({
                    StackName: settings.resourcesStackName || `${settings.project}-${settings.stage}-r`
                  });

                case 14:
                  result = _context5.sent;

                  if (!(result.Stacks.length < 1)) {
                    _context5.next = 17;
                    break;
                  }

                  throw new Error('Could not get CloudFormation stack information - ' + 'unable to update service registry');

                case 17:
                  stack = result.Stacks.pop();
                  r = new _serviceRegistryLib.Registry(settings.stage, 's3');
                  serviceDefinition = (0, _stringify2.default)(r.sm().loadDefinitionFile(definitionPath));
                  // console.log(serviceDefinition);

                  cfVars = {};

                  // eslint-disable-next-line no-restricted-syntax

                  _iteratorNormalCompletion = true;
                  _didIteratorError = false;
                  _iteratorError = undefined;
                  _context5.prev = 24;
                  for (_iterator = (0, _getIterator3.default)(stack.Outputs); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    output = _step.value;

                    cfVars[output.OutputKey] = output.OutputValue;
                  }

                  // console.log(cfVars);

                  _context5.next = 32;
                  break;

                case 28:
                  _context5.prev = 28;
                  _context5.t0 = _context5['catch'](24);
                  _didIteratorError = true;
                  _iteratorError = _context5.t0;

                case 32:
                  _context5.prev = 32;
                  _context5.prev = 33;

                  if (!_iteratorNormalCompletion && _iterator.return) {
                    _iterator.return();
                  }

                case 35:
                  _context5.prev = 35;

                  if (!_didIteratorError) {
                    _context5.next = 38;
                    break;
                  }

                  throw _iteratorError;

                case 38:
                  return _context5.finish(35);

                case 39:
                  return _context5.finish(32);

                case 40:
                  interpolator = new _transInterpolator2.default(cfVars, { open: '${', close: '}' });
                  updatedDefinition = JSON.parse(interpolator.interpolate(serviceDefinition));

                  // Build Deployment payload

                  deployment = {
                    region: e.options.region,
                    endpoint,
                    queues: updatedDefinition.publicQueues,
                    at: new Date().toISOString()
                  };


                  if (e.options.version) {
                    deployment.version = e.options.version;
                  }

                  SCli.log(`Updating Temando Service Registry ${updatedDefinition.id}`);
                  SCli.log(`Deployment Payload: ${(0, _stringify2.default)(deployment)}`);
                  _context5.next = 48;
                  return r.catalog().putDeployment(updatedDefinition.id, deployment);

                case 48:
                  SCli.log('Temando Service Registry updated successfully!');

                  return _context5.abrupt('return', e);

                case 50:
                case 'end':
                  return _context5.stop();
              }
            }
          }, _callee5, this, [[24, 28, 32, 40], [33,, 35, 39]]);
        }));

        function startRegistryUpdate(_x5) {
          return _ref5.apply(this, arguments);
        }

        return startRegistryUpdate;
      }()
    }]);
    return PluginTemandoServiceRegistry;
  }(S.classes.Plugin);

  return PluginTemandoServiceRegistry;
};

require('babel-polyfill');

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _awsSdk = require('aws-sdk');

var _awsSdk2 = _interopRequireDefault(_awsSdk);

var _transInterpolator = require('trans-interpolator');

var _transInterpolator2 = _interopRequireDefault(_transInterpolator);

var _serviceRegistryLib = require('@temando/service-registry-lib');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,