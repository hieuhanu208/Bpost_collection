'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _getIterator2 = require('babel-runtime/core-js/get-iterator');

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _bluebird = require('bluebird');

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _fsPromise = require('fs-promise');

var _fsPromise2 = _interopRequireDefault(_fsPromise);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _transInterpolator = require('trans-interpolator');

var _transInterpolator2 = _interopRequireDefault(_transInterpolator);

var _serviceRegistryLib = require('@temando/service-registry-lib');

var _lutils = require('lutils');

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _CfVariables = require('./CfVariables');

var _CfVariables2 = _interopRequireDefault(_CfVariables);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var TemandoServiceRegistry = function () {
  function TemandoServiceRegistry(serverless, options) {
    (0, _classCallCheck3.default)(this, TemandoServiceRegistry);

    _initialiseProps.call(this);

    this.serverless = serverless;
    this.options = options || {};

    this.hooks = {
      'registry:update:serverless': this.updateRegistry,
      'before:deploy:initialize': this.loadCfEnvironment,
      'after:deploy:deploy': this.setCfEnvironment,
      'before:offline:start': this.loadOfflineEnvironment,
      'before:offline:start:init': this.loadOfflineEnvironment
    };

    var _serverless = this.serverless,
        servicePath = _serverless.config.servicePath,
        yaml = _serverless.yamlParser,
        aws = _serverless.providers.aws,
        _serverless$service = _serverless.service,
        _serverless$service$c = _serverless$service.custom,
        custom = _serverless$service$c === undefined ? {} : _serverless$service$c,
        _serverless$service$p = _serverless$service.provider,
        region = _serverless$service$p.region,
        stage = _serverless$service$p.stage;

    /**
     * SET SERVICE DEFINITION CONFIG PATH
     */

    var customPath = custom.temandoRegistry && custom.temandoRegistry.serviceDefinition;

    var tryFiles = [_path2.default.join(servicePath, './ts-definition.json'), _path2.default.join(servicePath, './ts-definition.yml'), customPath && _path2.default.join(servicePath, customPath)].filter(function (v) {
      return v;
    });

    this.serviceDefinitionPath = tryFiles.find(function (filePath) {
      return _fsPromise2.default.existsSync(filePath);
    });

    /**
     * CfVariables
     */

    this.cfVariables = new _CfVariables2.default({
      // storagePath,
      yaml,
      aws,

      servicePath,
      region,
      stage,

      log: this.log
    });
  }

  /**
   * Called by `sls registry update`
   * Updates the registry with the endpoint payload and the serviceDefinition
   */


  /**
   * Loads in environment variables stored and mapped
   * into the in-memory `this.serverless.config` in order
   * for lambdas to deploy with augmented `environment` (process.env)
   */


  /**
   * Retrieves the
   */


  (0, _createClass3.default)(TemandoServiceRegistry, [{
    key: 'getStacks',


    /**
     * Retrieves CloudFormation stacks and handles errors
     *
     * @returns {Array} stacks
     */
    value: function () {
      var _ref = (0, _bluebird.coroutine)(_regenerator2.default.mark(function _callee() {
        var aws, _ref2, stacks;

        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                aws = this.serverless.providers.aws;
                _context.next = 3;
                return aws.request('CloudFormation', 'describeStacks', {
                  StackName: aws.naming.getStackName()
                });

              case 3:
                _ref2 = _context.sent;
                stacks = _ref2.Stacks;

                if (!(!stacks || stacks.length < 1)) {
                  _context.next = 7;
                  break;
                }

                throw new Error(`
        Could not get CloudFormation stack information -\
        unable to update service registry
      `);

              case 7:
                return _context.abrupt('return', stacks);

              case 8:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function getStacks() {
        return _ref.apply(this, arguments);
      }

      return getStacks;
    }()
  }]);
  return TemandoServiceRegistry;
}();

var _initialiseProps = function _initialiseProps() {
  var _this = this;

  this.commands = {
    registry: {
      commands: {
        update: {
          lifecycleEvents: ['serverless'],
          usage: 'Update the Temando Registry',
          options: {
            stage: {
              usage: 'Optional if only one stage is defined in project',
              shortcut: 's'
            },
            region: {
              usage: 'Target one region to deploy to',
              shortcut: 'r'
            },
            version: {
              usage: 'The version being deployment',
              shortcut: 'v',
              required: false
            }
          }
        }
      }
    }
  };
  this.updateRegistry = (0, _bluebird.coroutine)(_regenerator2.default.mark(function _callee2() {
    var _serverless$service$p2, stage, region, stack, _ref4, _ref5, registry, serviceDefinition, cfVars, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, out, interpolator, updatedDefinition, queues, streams, topics, deployment;

    return _regenerator2.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _serverless$service$p2 = _this.serverless.service.provider, stage = _serverless$service$p2.stage, region = _serverless$service$p2.region;
            stack = void 0;
            _context2.prev = 2;
            _context2.next = 5;
            return _this.getStacks();

          case 5:
            _ref4 = _context2.sent;
            _ref5 = (0, _slicedToArray3.default)(_ref4, 1);
            stack = _ref5[0];
            _context2.next = 15;
            break;

          case 10:
            _context2.prev = 10;
            _context2.t0 = _context2['catch'](2);

            _this.log('[REGISTRY] Skipping - invalid stack');
            _this.log('');
            return _context2.abrupt('return');

          case 15:
            registry = new _serviceRegistryLib.Registry(stage, 's3');
            serviceDefinition = (0, _stringify2.default)(registry.sm().loadDefinitionFile(_this.serviceDefinitionPath));
            cfVars = {};
            _iteratorNormalCompletion = true;
            _didIteratorError = false;
            _iteratorError = undefined;
            _context2.prev = 21;

            for (_iterator = (0, _getIterator3.default)(stack.Outputs); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              out = _step.value;
              cfVars[out.OutputKey] = out.OutputValue;
            }

            _context2.next = 29;
            break;

          case 25:
            _context2.prev = 25;
            _context2.t1 = _context2['catch'](21);
            _didIteratorError = true;
            _iteratorError = _context2.t1;

          case 29:
            _context2.prev = 29;
            _context2.prev = 30;

            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }

          case 32:
            _context2.prev = 32;

            if (!_didIteratorError) {
              _context2.next = 35;
              break;
            }

            throw _iteratorError;

          case 35:
            return _context2.finish(32);

          case 36:
            return _context2.finish(29);

          case 37:
            interpolator = new _transInterpolator2.default(cfVars, { open: '${', close: '}' });
            updatedDefinition = JSON.parse(interpolator.interpolate(serviceDefinition));
            queues = [];
            streams = [];
            topics = [];


            if (updatedDefinition.resources) {
              updatedDefinition.resources.forEach(function (resource) {
                if (!cfVars[resource.output]) {
                  throw new Error(`Unable to map output variable "${resource.output}" for resource id "${resource.id}" of type "${resource.type}" to CloudFormation Outputs`);
                }

                if (resource.type === 'aws:sqs') {
                  queues.push({
                    id: resource.id,
                    description: resource.description,
                    url: cfVars[resource.output]
                  });
                } else if (resource.type === 'aws:sns') {
                  topics.push({
                    id: resource.id,
                    description: resource.description,
                    arn: cfVars[resource.output]
                  });
                } else if (resource.type === 'aws:kinesis') {
                  streams.push({
                    id: resource.id,
                    description: resource.description,
                    name: cfVars[resource.output]
                  });
                } else {
                  throw new Error(`Unsupported resource type "${resource.type}" for resource id "${resource.id}"`);
                }
              });
            }

            deployment = {
              region,
              endpoint: cfVars.ServiceEndpoint,
              queues: [].concat((0, _toConsumableArray3.default)(updatedDefinition.publicQueues), queues),
              streams,
              topics,
              at: new Date().toISOString()
            };


            if (_this.options.version) {
              deployment.version = _this.options.version;
            }

            _this.log(`[REGISTRY] Updating Temando Service Registry ${_chalk2.default.bold(updatedDefinition.id)}`);
            _this.log('[REGISTRY] Deployment Payload:');
            _this.log(`[REGISTRY] ${(0, _stringify2.default)(deployment, 2, 2)}`);
            _this.log('');

            _context2.next = 51;
            return registry.catalog().putDeployment(updatedDefinition.id, deployment);

          case 51:
            _this.log('[REGISTRY] Temando Service Registry updated successfully!');
            _this.log('');

          case 53:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, _this, [[2, 10], [21, 25, 29, 37], [30,, 32, 36]]);
  }));
  this.loadOfflineEnvironment = (0, _bluebird.coroutine)(_regenerator2.default.mark(function _callee3() {
    return _regenerator2.default.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _this.log('[ENVIRONMENT] Loading cached CF Variables for Serverless Offline...');
            _this.log('');

            _context3.next = 4;
            return _this.cfVariables.initialize();

          case 4:
            _this.cfVariables.populateEnvironments(_this.serverless.service);

          case 5:
          case 'end':
            return _context3.stop();
        }
      }
    }, _callee3, _this);
  }));
  this.loadCfEnvironment = (0, _bluebird.coroutine)(_regenerator2.default.mark(function _callee4() {
    var stack, _ref8, _ref9, cfVars, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, out;

    return _regenerator2.default.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            _this.log('[ENVIRONMENT] Loading cached CF Variables...');
            _this.log('');

            _context4.next = 4;
            return _this.cfVariables.initialize();

          case 4:

            _this.log('[ENVIRONMENT] Retrieving variables from CloudFormation Outputs...');
            _this.log('');

            stack = void 0;
            _context4.prev = 7;
            _context4.next = 10;
            return _this.getStacks();

          case 10:
            _ref8 = _context4.sent;
            _ref9 = (0, _slicedToArray3.default)(_ref8, 1);
            stack = _ref9[0];
            _context4.next = 20;
            break;

          case 15:
            _context4.prev = 15;
            _context4.t0 = _context4['catch'](7);

            _this.log('[ENVIRONMENT] Skipping variable lookup - invalid stack');
            _this.log('');
            return _context4.abrupt('return');

          case 20:
            cfVars = {};

            if (!(stack && _lutils.typeOf.Array(stack.Outputs) && stack.Outputs.length)) {
              _context4.next = 48;
              break;
            }

            _iteratorNormalCompletion2 = true;
            _didIteratorError2 = false;
            _iteratorError2 = undefined;
            _context4.prev = 25;

            for (_iterator2 = (0, _getIterator3.default)(stack.Outputs); !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
              out = _step2.value;
              cfVars[out.OutputKey] = out.OutputValue;
            }
            _context4.next = 33;
            break;

          case 29:
            _context4.prev = 29;
            _context4.t1 = _context4['catch'](25);
            _didIteratorError2 = true;
            _iteratorError2 = _context4.t1;

          case 33:
            _context4.prev = 33;
            _context4.prev = 34;

            if (!_iteratorNormalCompletion2 && _iterator2.return) {
              _iterator2.return();
            }

          case 36:
            _context4.prev = 36;

            if (!_didIteratorError2) {
              _context4.next = 39;
              break;
            }

            throw _iteratorError2;

          case 39:
            return _context4.finish(36);

          case 40:
            return _context4.finish(33);

          case 41:
            _this.log('[ENVIRONMENT] Updating CF Variable store...');

            _this.cfVariables.updateStore(cfVars);
            _this.cfVariables.populateEnvironments(_this.serverless.service);

            _context4.next = 46;
            return _this.cfVariables.saveStore();

          case 46:
            _context4.next = 49;
            break;

          case 48:
            _this.log('[ENVIRONMENT] Note: CloudFormation has no Output');
            // TODO: stop here when logic below appropriates

          case 49:
          case 'end':
            return _context4.stop();
        }
      }
    }, _callee4, _this, [[7, 15], [25, 29, 33, 41], [34,, 36, 40]]);
  }));
  this.setCfEnvironment = (0, _bluebird.coroutine)(_regenerator2.default.mark(function _callee5() {
    var stack, _ref11, _ref12, cfVars, _iteratorNormalCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, out;

    return _regenerator2.default.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            _context5.next = 2;
            return _this.cfVariables.initialize();

          case 2:

            _this.log('[ENVIRONMENT] Retrieving variables from CloudFormation Outputs...');
            _this.log('');

            stack = void 0;
            _context5.prev = 5;
            _context5.next = 8;
            return _this.getStacks();

          case 8:
            _ref11 = _context5.sent;
            _ref12 = (0, _slicedToArray3.default)(_ref11, 1);
            stack = _ref12[0];
            _context5.next = 18;
            break;

          case 13:
            _context5.prev = 13;
            _context5.t0 = _context5['catch'](5);

            _this.log('[ENVIRONMENT] Skipping variable lookup - invalid stack');
            _this.log('');
            return _context5.abrupt('return');

          case 18:
            cfVars = {};

            if (!(stack && _lutils.typeOf.Array(stack.Outputs) && stack.Outputs.length)) {
              _context5.next = 43;
              break;
            }

            _iteratorNormalCompletion3 = true;
            _didIteratorError3 = false;
            _iteratorError3 = undefined;
            _context5.prev = 23;

            for (_iterator3 = (0, _getIterator3.default)(stack.Outputs); !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
              out = _step3.value;
              cfVars[out.OutputKey] = out.OutputValue;
            }
            _context5.next = 31;
            break;

          case 27:
            _context5.prev = 27;
            _context5.t1 = _context5['catch'](23);
            _didIteratorError3 = true;
            _iteratorError3 = _context5.t1;

          case 31:
            _context5.prev = 31;
            _context5.prev = 32;

            if (!_iteratorNormalCompletion3 && _iterator3.return) {
              _iterator3.return();
            }

          case 34:
            _context5.prev = 34;

            if (!_didIteratorError3) {
              _context5.next = 37;
              break;
            }

            throw _iteratorError3;

          case 37:
            return _context5.finish(34);

          case 38:
            return _context5.finish(31);

          case 39:
            _this.log('[ENVIRONMENT] Updating CF Variable store...');
            _this.cfVariables.updateStore(cfVars);
            _context5.next = 44;
            break;

          case 43:
            _this.log('[ENVIRONMENT] Note: CloudFormation has no Output');
            // TODO: stop here when logic below appropriates

          case 44:

            _this.cfVariables.populateEnvironments(_this.serverless.service);

            _context5.next = 47;
            return _this.cfVariables.updateLambdaEnvironments(_this.serverless.service);

          case 47:
            _context5.next = 49;
            return _this.cfVariables.saveStore();

          case 49:

            _this.log('');

          case 50:
          case 'end':
            return _context5.stop();
        }
      }
    }, _callee5, _this, [[5, 13], [23, 27, 31, 39], [32,, 34, 38]]);
  }));

  this.log = function () {
    var _serverless$cli;

    return (_serverless$cli = _this.serverless.cli).log.apply(_serverless$cli, arguments);
  };
};

exports.default = TemandoServiceRegistry;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,