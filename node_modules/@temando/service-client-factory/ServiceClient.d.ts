/// <reference types="node" />
import { AWSError, Kinesis, SNS, SQS } from 'aws-sdk';
import { EventEmitter } from 'events';
import * as Def from './types';
/**
 * Standardises service-to-service communication among Temando Services.
 *
 * Each method for the different supported transport types uses consistent interface between them,
 * and abstracts the configuration knowledge for easier use.
 */
export declare class ServiceClient extends EventEmitter {
    /** Service name */
    readonly name: Def.IServiceClientBaseConfig['name'];
    /** Temando Account Id - sent in the request header */
    accountId: Def.TAccountId;
    /** Code sent with in the request header */
    code: Def.TCode;
    /** Temando sovereignty for request */
    sovereignty: Def.TSovereignty;
    /** Call Id sent in the header as X-Temando-Service-Call */
    callId: Def.TCallId;
    /** Origin service identifier */
    private origin;
    /** Call depth number */
    private callDepth;
    /** AWS Credentials */
    private credentials;
    /** AWS Region Id */
    private region;
    /** SQS queues */
    private queues;
    /** SNS topics */
    private topics;
    /** HTTP endpoint - used as a base for all requests */
    private endpoint;
    /** Kinesis streams */
    private streams;
    /** Default headers to send with every request */
    private defaultHeaders;
    /** Amazon SNS Client */
    private snsClient;
    /** Amazon SQS Client */
    private sqsClient;
    /** Amazon Kinesis Client */
    private kinesisClient;
    private createClientValidation;
    /**
     * Creates an instance of a Temando Service Client used to communicate via the following methods:
     * - HTTP
     * - Amazon SQS
     * - Amazon SNS
     * - Amazon Kinesis
     *
     * Note: You are required to pass in at least one method configuration in order to use the Service Client
     */
    constructor(config: Def.IServiceClientConfig);
    /**
     * Makes a request to a Temando Service using a HTTP Endpoint
     * @param path Path to request from eg. `shipments/<id>/<shipmentId>`
     * @param config `fetch()` configuration object
     */
    request(path: string, config: RequestInit): Promise<Response>;
    /**
     * Enqueues a message in an SQS Queue
     * @param name Queue name - from configuration
     * @param config message request configuration object
     */
    enqueue(name: string, config: Def.IEnqueueConfig): Promise<SQS.SendMessageResult | AWSError>;
    /**
     * Sends a message to an SNS Topic
     * @param name Topic name - from configuration
     * @param config message request configuration object
     */
    message(name: string, config: Def.IMessageConfig): Promise<SNS.PublishResponse | AWSError>;
    /**
     * Sends a payload to a Kinesis Stream
     * @param name Stream name - from configuration
     * @param config payload request configuration object
     */
    stream(name: string, config: Def.IStreamConfig): Promise<Kinesis.PutRecordOutput | AWSError>;
    /**
     * Create headers from a combination of mandatory, default and on-request defined headers
     * @param config configuration object
     */
    private createHeaders(config);
    /**
     * Return AWS SQS and SNS compatible MessageAttribute.DataType compatible strings
     *
     * @param value
     */
    private getDataType(value);
    /**
     * Generates Amazon SNS and SQS Compatible Message Attributes
     *
     * @param headers Headers object
     */
    private getMsgAttrFromHeaders(headers);
}
