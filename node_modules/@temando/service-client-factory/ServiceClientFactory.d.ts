/// <reference types="node" />
import { EventEmitter } from 'events';
import { ServiceClient } from './ServiceClient';
import * as Def from './types';
/**
 * Creates Service Clients for Temando Service inter-communication based on `ts-definition` configuration
 * and `ts-env` environment variables
 *
 */
export declare class ServiceClientFactory extends EventEmitter {
    callDepth: Def.TCallDepth;
    accountId: Def.TAccountId;
    code: Def.TCode;
    sovereignty: Def.TSovereignty;
    tsDefinition: Def.ITemandoServiceDefinition;
    tsEnv: Def.ITemandoEnvironment;
    private registeredServices;
    private _callId;
    private callIdValidation;
    private constructorValidation;
    constructor(config: Def.IServiceClientFactoryConfig);
    registerService({serviceName, currentRegion, deployments}: Def.IRegisterServiceConfig): void;
    /**
     * Checks if registered service exists
     */
    isRegisteredService(serviceName: any): boolean;
    create({name, config}: Def.IClientCreateConfig): ServiceClient;
    callId: Def.TCallId;
    /**
     * Gets definition for a specific service and sovereignty
     * @param name Name of service to get definition for
     * @param sovereignty Sovereignty to get service definition for
     */
    private getServiceDeployments(name, sovereignty);
}
