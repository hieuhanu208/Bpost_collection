import * as AWS from 'aws-sdk';
/** Service Topic configuration */
export interface ITopic {
    id: string;
    arn: string;
}
/** Service Stream configuration */
export interface IStream {
    id: string;
    name: string;
}
/** Service Queue configuration */
export interface IQueue {
    id: string;
    url: string;
}
/** Temando Account Id - sent in the request header */
export declare type TCallId = string;
/** Temando Account Id - sent in the request header */
export declare type TAccountId = string;
/** Code sent with in the request header */
export declare type TCode = string;
/** Temando sovereignty for request */
export declare type TSovereignty = string;
/** Service HTTP base url */
export declare type TEndpoint = string;
/** The service of origin for the request */
export declare type TOrigin = string;
/** The call depth for the request */
export declare type TCallDepth = number;
/** Default headers to send with every request */
export interface IDefaultHeaders {
    [key: string]: string | number | boolean;
}
export declare type IRequestHeaders = RequestInit['headers'];
export interface IHeaders extends IRequestHeaders {
    [key: string]: any;
}
export interface IClientCreateConfig {
    name: string;
    config?: {
        sovereignty?: IServiceClientBaseConfig['sovereignty'];
        accountId?: IServiceClientBaseConfig['accountId'];
        code?: IServiceClientBaseConfig['code'];
        defaultHeaders?: IServiceClientBaseConfig['defaultHeaders'];
    };
}
export interface IRegisterServiceConfig {
    serviceName: string;
    currentRegion: string;
    deployments: IDeployments[];
}
export interface IServiceClientBaseConfig {
    /** Service name as per the Temando Service definition */
    readonly name: string;
    callId: TCallId;
    sovereignty: TSovereignty;
    accountId: TAccountId;
    code: TCode;
    origin: TOrigin;
    callDepth: TCallDepth;
    region?: string;
    defaultHeaders?: IDefaultHeaders;
    /** Optional alternative AWS-SDK Client - useful for mocking */
    awsSDK?: any;
}
export interface IServiceEndpointConfig extends IServiceClientBaseConfig {
    endpoint: TEndpoint;
    queues?: IQueue[];
    topics?: ITopic[];
    streams?: IStream[];
}
export interface IServiceQueueConfig extends IServiceClientBaseConfig {
    endpoint?: TEndpoint;
    region: string;
    queues: IQueue[];
    topics?: ITopic[];
    streams?: IStream[];
}
export interface IServiceTopicConfig extends IServiceClientBaseConfig {
    endpoint?: TEndpoint;
    region: string;
    queues?: IQueue[];
    topics: ITopic[];
    streams?: IStream[];
}
export interface IServiceStreamConfig extends IServiceClientBaseConfig {
    endpoint?: TEndpoint;
    region: string;
    queues?: IQueue[];
    topics?: ITopic[];
    streams?: IStream[];
}
/** Service client configuration */
export declare type IServiceClientConfig = IServiceEndpointConfig | IServiceQueueConfig | IServiceTopicConfig | IServiceStreamConfig;
/** Temando service definition */
export interface ITemandoServiceDefinition {
    id: string;
    dependencies: string[];
    publicQueues?: IQueue[];
}
/** Temando service environment */
export interface ITemandoEnvironment {
    targetService: string;
    sovereignty?: {
        [key: string]: {
            AwsRegions: string[];
        };
    };
    services: Array<{
        id: string;
        currentRegion: string;
        deployments: IDeployments[];
    }>;
}
/** AWS sovereignty region map */
export interface ISovereigntyMap {
    [s: string]: {
        AwsRegions: string[];
    };
}
export interface IServiceClientFactoryConfig {
    callId?: string;
    callDepth?: TCallDepth;
    accountId?: TAccountId;
    code?: TCode;
    sovereignty?: TSovereignty;
    tsDefinition: ITemandoServiceDefinition;
    tsEnv: ITemandoEnvironment;
}
export interface IQueueDeployments {
    id: string;
    url: string;
}
export interface IDeployments {
    region: string;
    endpoint?: TEndpoint;
    queues?: IQueue[];
    topics?: ITopic[];
    streams?: IStream[];
    at?: string;
    version?: string;
    $schema?: string;
}
export interface IRegisteredServiceDefinitions {
    [key: string]: {
        id: string;
        currentRegion?: string;
        deployments: IDeployments[];
    };
}
export interface IAWSCredentials {
    accessKeyId: string;
    secretAccessKey: string;
    sessionToken?: string;
}
export interface IEnqueueConfig {
    /** Request body */
    body: RequestInit['body'];
    /** Request headers */
    headers?: IHeaders;
    /** Message delivery delay (in seconds) */
    delaySeconds?: AWS.SQS.SendMessageRequest['DelaySeconds'];
    /** SQS Message De-duplication Id @see http://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/SQS.html#sendMessage-property */
    messageDeduplicationId?: AWS.SQS.SendMessageRequest['MessageDeduplicationId'];
    /** SQS Message Group Id @see http://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/SQS.html#sendMessage-property */
    messageGroupId?: AWS.SQS.SendMessageRequest['MessageGroupId'];
}
export interface IMessageConfig {
    body: RequestInit['body'];
    headers?: IHeaders;
    /** Message Subject @see http://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/SNS.html#publish-property */
    subject?: AWS.SNS.PublishInput['Subject'];
    /** Message Structure @see http://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/SNS.html#publish-property */
    messageStructure?: AWS.SNS.PublishInput['MessageStructure'];
}
export interface IStreamConfig {
    body: RequestInit['body'];
    headers?: IHeaders;
    /** Kinesis Partition Key @see http://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/Kinesis.html#putRecord-property */
    partitionKey: AWS.Kinesis.PutRecordInput['PartitionKey'];
    /** Kinesis Explicit Hash Key @see http://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/Kinesis.html#putRecord-property */
    explicitHashKey?: AWS.Kinesis.PutRecordInput['ExplicitHashKey'];
    /** Kinesis Sequence Number For Ordering @see http://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/Kinesis.html#putRecord-property */
    sequenceNumber?: AWS.Kinesis.PutRecordInput['SequenceNumberForOrdering'];
}
export interface IEvent {
    serviceName: string;
    eventId: string;
    config?: {
        headers?: IHeaders;
        body?: RequestInit['body'];
        [key: string]: any;
    };
    response?: any;
}
export interface IRequestEvent extends IEvent {
    endpoint: string;
    path: string;
}
export interface IStreamEvent extends IEvent {
    name: string;
    streamName: string;
}
export interface IEnqueueEvent extends IEvent {
    name: string;
    queueUrl: string;
}
export interface IMessageEvent extends IEvent {
    name: string;
    topicArn: string;
}
