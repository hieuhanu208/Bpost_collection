export declare class Event {
    key: string;
    ordered: IListener[];
    before: IListener[];
    after: IListener[];
    default: IListener[];
    constructor(key: string);
    /**
     * Runs over callbacks in sequence
     *
     * @returns Last callback's result
     */
    propagate(...payload: any[]): Promise<any>;
    remove(listener: IListener): void;
    get(callback: any): IListener;
    add(listenerInput: Partial<IListener>, options?: IListenerConfig): IListener;
    addBefore(listenerInput: Partial<IListener>, options?: IListenerConfig): IListener;
    addAfter(listenerInput: Partial<IListener>, options?: IListenerConfig): IListener;
    private _add(listeners, listenerInput, options?);
    private _reorder();
}
export declare type IEventCallback = (...payload: any[]) => any;
export interface IListener {
    callback: IEventCallback;
    stack: string;
    limit: number;
    hits: number;
}
export interface IListenerConfig {
    prepend?: boolean;
    limit?: number;
}
