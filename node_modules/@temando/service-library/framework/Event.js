"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
class Event {
    constructor(key) {
        this.ordered = [];
        this.before = [];
        this.after = [];
        this.default = [];
        this.key = key;
    }
    /**
     * Runs over callbacks in sequence
     *
     * @returns Last callback's result
     */
    propagate(...payload) {
        return __awaiter(this, void 0, void 0, function* () {
            const context = {
                key: this.key,
                propagation: true,
                stopPropagation() { context.propagation = false; },
            };
            let result;
            const removed = new WeakSet();
            for (const listener of this.ordered) {
                if (context.propagation === false) {
                    break;
                }
                if (removed.has(listener)) {
                    continue;
                }
                listener.hits += 1;
                const { callback, limit, hits } = listener;
                if (hits >= limit) {
                    this.remove(listener);
                    removed.add(listener);
                }
                result = yield Promise.resolve(callback.apply(context, payload));
            }
            return result;
        });
    }
    remove(listener) {
        [this.before, this.after, this.default].forEach((listeners) => {
            const index = listeners.indexOf(listener);
            if (index > -1) {
                listeners.splice(index, 1);
            }
        });
        this._reorder();
    }
    get(callback) {
        return this.ordered.find((listener) => listener.callback === callback);
    }
    add(listenerInput, options) {
        return this._add(this.default, listenerInput, options);
    }
    addBefore(listenerInput, options) {
        return this._add(this.before, listenerInput, options);
    }
    addAfter(listenerInput, options) {
        return this._add(this.after, listenerInput, options);
    }
    _add(listeners, listenerInput, options = {}) {
        listenerInput.limit = options.limit || Infinity;
        listenerInput.hits = 0;
        const listener = listenerInput;
        if (options.prepend) {
            listeners.unshift(listener);
        }
        else {
            listeners.push(listener);
        }
        this._reorder();
        return listener;
    }
    _reorder() {
        this.ordered = [...this.before, ...this.default, ...this.after];
    }
}
exports.Event = Event;
//# sourceMappingURL=Event.js.map