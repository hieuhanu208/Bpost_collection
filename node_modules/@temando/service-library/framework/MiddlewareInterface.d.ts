import { IInputLambdaContext, IInputLambdaEvent } from '../types';
import { Mediator } from './Mediator';
export declare type ICallback = (err: any, response?: any) => any;
export declare type IMiddlewareCallback<E = IInputLambdaEvent, C = IInputLambdaContext, D = ICallback> = (event: E, context: C, callback: D) => any;
export interface IMiddlewareInterface<E = IInputLambdaEvent, C = IInputLambdaContext, D = ICallback> extends IMiddlewareCallback<E, C, D> {
    mediator: Mediator;
    use(middlewares: IMiddleware | IMiddleware[]): this;
}
export declare type IMiddleware = (m: Mediator) => void;
export declare function MiddlewareInterface<E = IInputLambdaEvent, C = IInputLambdaContext, D = ICallback>(mediator: Mediator, inputCallback?: IMiddlewareCallback<E, C, D>): IMiddlewareInterface<E, C, D>;
