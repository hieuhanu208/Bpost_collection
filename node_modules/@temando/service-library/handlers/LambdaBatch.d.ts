import { IMiddlewareInterface } from '../framework/MiddlewareInterface';
import { ILambdaEvent, ILambdaHandler } from '../types';
export declare type ILambdaHttpHandler<E, R> = (event: E) => Promise<R> | R;
export interface IRecord {
    EventSource?: string;
    eventSource?: string;
    [key: string]: any;
}
export interface IInputLambdaBatchEvent {
    Records: IRecord[];
}
export interface ILambdaBatchEvent extends ILambdaEvent {
    request: IRecord;
    records?: any[];
}
export interface ILambdaBatchEventSignatures<O> {
    (key: 'batch.events.resolved', callback: (event: ILambdaBatchEvent) => any, options?: O): any;
    (key: 'batch.event.prepare', callback: (event: ILambdaBatchEvent, payload: {
        record: IRecord;
        handler: ILambdaHandler<ILambdaBatchEvent>;
    }) => any, options?: O): any;
}
export { IMiddlewareInterface };
export declare function LambdaBatch(handler: ILambdaHandler<ILambdaBatchEvent>): IMiddlewareInterface<IInputLambdaBatchEvent, any, (err: any, response?: any) => any>;
