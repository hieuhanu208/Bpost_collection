"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const bluebird_1 = require("bluebird");
const lutils_1 = require("lutils");
const uuid = require("uuid/v4");
const Mediator_1 = require("../framework/Mediator");
const MiddlewareInterface_1 = require("../framework/MiddlewareInterface");
function LambdaBatch(handler) {
    const m = new Mediator_1.Mediator({ DEBUG: !!process.env.T_DEBUG });
    m.declare('event');
    m.declare('lambda.request');
    m.declare('record');
    m.declare('lambda.response');
    m.declare('event.end');
    return MiddlewareInterface_1.MiddlewareInterface(m, (inputEvent, inputContext, done) => __awaiter(this, void 0, void 0, function* () {
        const { Records } = inputEvent;
        const id = uuid();
        const event = {
            id,
            response: {},
            request: {},
            callId: id,
            event: inputEvent,
            context: inputContext,
            mediator: m,
            error: null,
            records: lutils_1.clone(Records),
        };
        try {
            yield m.emit('event', event);
            yield m.emit('lambda.request', event);
            yield bluebird_1.map(event.records, (record) => __awaiter(this, void 0, void 0, function* () {
                try {
                    yield m.emit('batch.event.prepare', event, { record, handler });
                }
                catch (error) {
                    record.error = error;
                }
            }));
        }
        catch (error) {
            event.error = error;
        }
        try {
            yield m.emit('batch.events.resolved', event);
            yield m.emit('lambda.response', event);
        }
        catch (error) {
            event.error = error;
        }
        yield m.emit('event.end', event);
        return done(event.error || null, event.response);
    }));
}
exports.LambdaBatch = LambdaBatch;
//# sourceMappingURL=LambdaBatch.js.map