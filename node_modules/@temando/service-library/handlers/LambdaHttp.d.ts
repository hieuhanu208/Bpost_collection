import { IMiddlewareInterface } from '../framework/MiddlewareInterface';
import { IInputLambdaContext, IInputLambdaHttpEvent, ILambdaHandler, ILambdaHttpEvent, ILambdaHttpResponse } from '../types';
export declare type ILambdaHttpEventNames = ('event' | 'event.end' | 'lambda.request' | 'lambda.response' | 'handler.request' | 'handler.response' | 'http.request.prepare' | 'http.response.prepare');
export interface ILambdaHttpEventSignatures<O> {
    (key: ILambdaHttpEventNames, callback: (event: ILambdaHttpEvent) => any, options?: O): any;
}
export { IMiddlewareInterface };
/**
 * Transforms lambda-proxy input to a request object
 */
export declare function lambdaProxyToHttpRequest(event: IInputLambdaHttpEvent, context: IInputLambdaContext): {
    headers: {
        [key: string]: string;
    };
    params: {
        [key: string]: string;
    };
    query: any;
    body: string;
    method: string;
    path: string;
};
export declare function LambdaHttp(handler: ILambdaHandler<ILambdaHttpEvent, ILambdaHttpResponse>): IMiddlewareInterface<IInputLambdaHttpEvent, any, (err: any, response?: any) => any>;
