"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const QueryString = require("qs");
const uuid = require("uuid/v4");
const Mediator_1 = require("../framework/Mediator");
const MiddlewareInterface_1 = require("../framework/MiddlewareInterface");
/**
 * Transforms lambda-proxy input to a request object
 */
function lambdaProxyToHttpRequest(event, context) {
    const { pathParameters: params, httpMethod: method, queryStringParameters: query, body, headers, path, } = event;
    const enhancedQuery = QueryString.parse(QueryString.stringify(query || {}, { encode: false }));
    return {
        headers: headers || {},
        params: params || {},
        query: enhancedQuery,
        body,
        method,
        path,
    };
}
exports.lambdaProxyToHttpRequest = lambdaProxyToHttpRequest;
function LambdaHttp(handler) {
    const m = new Mediator_1.Mediator({ DEBUG: !!process.env.T_DEBUG });
    m.declare('event');
    m.declare('lambda.request');
    m.declare('handler.request');
    m.declare('handler.response');
    m.declare('http.request.prepare');
    m.declare('http.response.prepare');
    m.declare('http.exception');
    m.declare('lambda.response');
    m.declare('event.end');
    m.on('lambda.response', ({ response }) => {
        if (response.body && typeof response.body !== 'string') {
            response.body = JSON.stringify(response.body || '');
        }
    });
    return MiddlewareInterface_1.MiddlewareInterface(m, (inputEvent, inputContext, done) => __awaiter(this, void 0, void 0, function* () {
        const id = uuid();
        const event = {
            id,
            response: {},
            request: {},
            callId: id,
            event: inputEvent,
            context: inputContext,
            mediator: m,
            error: null,
        };
        try {
            yield m.emit('event', event);
            yield m.emit('lambda.request', event);
            event.request = lambdaProxyToHttpRequest(inputEvent, inputContext);
            yield m.emit('http.request.prepare', event);
            yield m.emit('handler.request', event);
            event.response = yield Promise.resolve(handler(event));
            yield m.emit('handler.response', event);
        }
        catch (error) {
            event.error = error;
        }
        try {
            yield m.emit('http.response.prepare', event);
            yield m.emit('lambda.response', event);
        }
        catch (error) {
            event.error = error;
        }
        if (event.error) {
            yield m.emit('http.exception', event);
        }
        yield m.emit('event.end', event);
        return done(event.error || null, event.response);
    }));
}
exports.LambdaHttp = LambdaHttp;
//# sourceMappingURL=LambdaHttp.js.map