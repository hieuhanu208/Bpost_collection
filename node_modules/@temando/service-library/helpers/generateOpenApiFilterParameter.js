"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const possibleFilterValues = {
    equal: 'value',
    notEqual: 'value',
    greaterThan: 'value',
    greaterThanOrEqual: 'value',
    lessThan: 'value',
    lessThanOrEqual: 'value',
    in: ['value'],
    notIn: ['value'],
    beginsWith: 'value',
    exists: true,
    contains: 'value',
    doesNotContain: 'value',
};
/**
 * Generate query parameter for Open API v2
 *
 * Describe filter based on field fields configuration.
 * If no example is given, an example will be generated using the
 * first filter field configuration.
 */
exports.generateOpenApiFilterParameter = (filterFieldsConfig, example) => {
    if (!example) {
        const examplePath = Object.keys(filterFieldsConfig).pop();
        const exampleOperator = filterFieldsConfig[examplePath].supportedOperators.pop();
        example = [
            {
                path: examplePath,
                operator: exampleOperator,
                value: possibleFilterValues[exampleOperator],
            },
        ];
    }
    const fields = Object.keys(filterFieldsConfig)
        .map((filter) => `- \`${filter}\` (operators: ${filterFieldsConfig[filter].supportedOperators.join(', ')})`);
    const description = `Search filter object converted into url encoded JSON string.\n\n\
Filterable paths:\n${fields.join('\n')}\n\n\
Example search filter object:\n\`\`\`${JSON.stringify(example)}\`\`\`\n\n\
Example parameter:\n\`${encodeURI(JSON.stringify(example))}\``;
    return {
        name: 'filter',
        in: 'query',
        required: false,
        type: 'string',
        description,
    };
};
//# sourceMappingURL=generateOpenApiFilterParameter.js.map