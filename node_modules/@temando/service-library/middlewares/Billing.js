"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const AWS = require("aws-sdk");
const errors_1 = require("../errors");
function Billing({ name, context } = {}) {
    const sqs = new AWS.SQS();
    const getKey = (event) => {
        const key = name || (event.context && event.context.functionName);
        if (!key) {
            throw new Error('[Middleware][Billing] Missing function name');
        }
        return `${key}`;
    };
    const getQueueUrl = (event) => {
        const { event: { requestContext: { accountId, stage } } } = event;
        const region = process.env.AWS_REGION || 'eu-west-1';
        let url = `https://sqs.${region}.amazonaws.com/${accountId}`;
        url += `/temando-billing-service-${stage}-ingest`;
        return url;
    };
    return (m) => {
        m.on('event.end', (event) => __awaiter(this, void 0, void 0, function* () {
            const { error } = event;
            const isError = error instanceof Error;
            const isTemandoError = error instanceof errors_1.TemandoError;
            const isInternalError = error && error.name === 'InternalError';
            if (isInternalError || (isError && !isTemandoError)) {
                return;
            }
            try {
                yield sqs.sendMessage({
                    MessageBody: JSON.stringify({
                        name: getKey(event),
                        increment: 1,
                        context: context && context(event),
                    }),
                    QueueUrl: getQueueUrl(event),
                }).promise();
            }
            catch (err) {
                console.log(`[Middleware][Billing] SQS Error: ${err.message}`);
            }
        }));
    };
}
exports.Billing = Billing;
//# sourceMappingURL=Billing.js.map