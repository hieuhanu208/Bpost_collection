"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const lutils_1 = require("lutils");
const errors_1 = require("../errors");
const utils_1 = require("../utils");
function prepareHttpRequest({ callHeader = 'x-temando-service-call', event }) {
    const { request } = event;
    request.headers = utils_1.normalizeHeaders(request.headers);
    event.callId = request.headers[callHeader] || event.callId;
    // If content-type is JSON, try to parse it
    if (request.body && /\bapplication\/.*json\b/.test(request.headers['content-type'] || '')) {
        try {
            request.body = JSON.parse(request.body);
        }
        catch (err) {
            throw new errors_1.BadRequestError('Malformed JSON body');
        }
    }
}
exports.prepareHttpRequest = prepareHttpRequest;
/**
 * Http middleware
 *
 * Integrates with:
 * - `LambdaHttp` handler
 */
function Http({ callHeader } = {}) {
    return (m) => {
        m.declare('http.request');
        m.declare('http.response');
        m.on('http.request.prepare', (event) => {
            prepareHttpRequest({ callHeader, event });
            return m.emit('http.request', event);
        });
        m.on('http.response.prepare', (event) => {
            const { error = {}, response = {} } = event;
            const headers = {
                'content-type': 'application/json',
                'x-temando-service-call': event.callId,
            };
            if (error) {
                error.id = event.callId;
                event.response = {
                    statusCode: parseInt(error.status, 10) || 500,
                    body: { errors: [error] },
                    headers,
                };
                event.error = null;
            }
            else {
                event.response = lutils_1.merge({ statusCode: 200, headers }, response);
            }
            event.response.headers = utils_1.normalizeHeaders(event.response.headers);
            return m.emit('http.response', event);
        });
    };
}
exports.Http = Http;
//# sourceMappingURL=Http.js.map