import { IJsonApiErrorBody } from '@temando/errors/JsonApiError';
import { Mediator } from '../framework/Mediator';
import { ILambdaHttpEvent } from '../types';
export interface IJsonApiParams {
    /**
     * Whether to log regular errors to the console.
     * @default true
     */
    logErrors?: boolean;
}
export interface IJsonApiObject {
    [key: string]: any;
}
export declare type IJsonApiLink = null | string | {
    href: string;
    meta?: IJsonApiObject;
};
export interface IJsonApiResource {
    id?: string;
    type: string;
    attributes?: IJsonApiObject;
    links?: IJsonApiLinks;
    meta?: IJsonApiObject;
    relationships?: IJsonApiObject;
}
export interface IJsonApiLinks {
    self?: IJsonApiLink;
    first?: IJsonApiLink;
    last?: IJsonApiLink;
    next?: IJsonApiLink;
    prev?: IJsonApiLink;
}
export declare type IJsonApiData = IJsonApiResource | IJsonApiResource[] | null;
/** Based on http://jsonapi.org/schema */
export interface IJsonApiBody {
    data?: IJsonApiData;
    included?: IJsonApiResource[] | IJsonApiResource;
    links?: IJsonApiLinks;
    meta?: IJsonApiObject;
    jsonapi?: {
        version: string;
        [key: string]: any;
    };
}
export interface IJsonApiResponseBody extends IJsonApiBody {
    errors?: IJsonApiErrorBody[];
}
export interface IJsonApiEvent extends ILambdaHttpEvent {
    request: {
        headers: ILambdaHttpEvent['request']['headers'];
        query: ILambdaHttpEvent['request']['query'];
        params: ILambdaHttpEvent['request']['params'];
        method: ILambdaHttpEvent['request']['method'];
        path: ILambdaHttpEvent['request']['path'];
        body: IJsonApiBody;
    };
}
export interface IJsonApiResponse {
    statusCode: number;
    headers?: {
        [key: string]: string;
    };
    body: IJsonApiResponseBody;
}
/**
 * JsonApi middleware
 *
 * Intercepts http events to mutate the request or response to follow
 * the JSON API standard.
 *
 * @see http://jsonapi.org/format/1.0/
 *
 * Integrates with:
 * - `Http` middleware
 */
export declare function JsonApi({logErrors}?: IJsonApiParams): (m: Mediator) => void;
