import { Mediator } from '../framework/Mediator';
import { ILambdaBatchEvent, IRecord } from '../handlers';
import { ILambdaHttpRequest } from '../index';
export interface IKinesisRecord extends IRecord {
    eventID: string;
    eventVersion: string;
    invokeIdentityArn: string;
    eventName: string;
    eventSourceARN: string;
    eventSource: string;
    awsRegion: string;
    kinesis: {
        data: string;
        sequenceNumber: string;
        partitionKey: string;
        kinesisSchemaVersion: string;
    };
}
export interface IKinesisMwEventSignatures<O> {
    (key: 'kinesis.record', callback: (event: IKinesisEvent) => any, options?: O): any;
    (key: 'kinesis.records.resolved', callback: (event: ILambdaBatchEvent) => any, options?: O): any;
}
export interface IKinesisEvent extends ILambdaBatchEvent {
    request: Partial<ILambdaHttpRequest>;
    record: IKinesisRecord;
}
/**
 * Kinesis middleware
 *
 * Integrates with:
 * - (required) `LambdaBatch` handler
 */
export declare function Kinesis(): (m: Mediator) => void;
