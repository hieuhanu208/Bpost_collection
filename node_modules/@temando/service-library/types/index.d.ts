import { JsonApiError } from '../errors';
import { Mediator } from '../framework';
export * from './EventSignatures';
export declare type IInputLambdaContext = any;
export interface IInputLambdaEvent {
    [key: string]: any;
}
export declare type ILambdaHandler<E, R = any> = (event: E) => Promise<R> | R;
export interface IInputLambdaHttpEvent {
    headers: {
        [key: string]: string;
    };
    pathParameters: {
        [key: string]: string;
    };
    httpMethod: string;
    queryStringParameters: {
        [key: string]: string;
    };
    requestContext: {
        [key: string]: any;
    };
    body: string;
    path: string;
}
export interface IEvent {
    id: string;
    mediator: Mediator;
    callId: string;
    response: any;
    error: any;
}
export interface ILambdaEvent extends IEvent {
    request: IInputLambdaEvent;
    event: IInputLambdaEvent;
    context: IInputLambdaContext;
    response: ILambdaResponse;
}
export interface ILambdaHttpEvent extends IEvent {
    event: IInputLambdaHttpEvent;
    request: ILambdaHttpRequest;
    context: IInputLambdaContext;
    error: null | Error | JsonApiError;
    response: ILambdaHttpResponse;
}
export interface ILambdaHttpRequest {
    headers: {
        [key: string]: string;
    };
    query: {
        [key: string]: string;
    };
    params: {
        [key: string]: string;
    };
    method: string;
    path: string;
    body: any;
}
export interface ILambdaResponse {
    statusCode: number;
    headers?: {
        [key: string]: string;
    };
    body?: string;
}
export interface ILambdaHttpResponse extends ILambdaResponse {
    body?: any;
}
