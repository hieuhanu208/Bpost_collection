#!/usr/bin/env node
'use strict';

var _commander = require('commander');

var _commander2 = _interopRequireDefault(_commander);

var _serviceRegistryLib = require('@temando/service-registry-lib');

var _getAWSCredentials = require('./lib/getAWSCredentials');

var _getAWSCredentials2 = _interopRequireDefault(_getAWSCredentials);

var _constructEqualCondition = require('./lib/constructEqualCondition');

var _constructEqualCondition2 = _interopRequireDefault(_constructEqualCondition);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_commander2.default.option('-e, --env <env>', 'the environment the registry is', 'dev').option('-m, --mode <mode>', 'set the mode, s3 or local', 's3').option('--profile <profile>', 'AWS profile to use when communicating with Amazon S3');

_commander2.default.command('list').description('list the catalog entry ids').action(() => {
  const opts = {};
  if (_commander2.default.profile) {
    opts.credentials = (0, _getAWSCredentials2.default)(_commander2.default.profile);
  }
  const r = new _serviceRegistryLib.Registry(_commander2.default.env, _commander2.default.mode, opts);
  r.catalog().all().then(entries => {
    const catalogIds = entries.map(entry => {
      if (entry.hasOwnProperty('definition') === false) {
        return undefined;
      }

      return entry.definition.id;
    }).filter(entry => entry !== undefined);

    console.log(JSON.stringify(catalogIds, null, 2));
  }, error => {
    console.warn(error);
    process.exit(1);
  });
});

_commander2.default.command('search <filter>').description(`Searches the catalog for entries that match the given filter and returns
  their entry ids. A filter resembles a query string, eg. hasFoo=value.`).action(filter => {
  const pairs = filter.trim().split('&').map(pairStr => {
    const tokens = pairStr.split('=');

    return {
      key: tokens[0],
      value: tokens[1]
    };
  });

  const criteria = {
    $and: pairs.map(pair => (0, _constructEqualCondition2.default)(pair.key, pair.value))
  };

  const opts = {};
  if (_commander2.default.profile) {
    opts.credentials = (0, _getAWSCredentials2.default)(_commander2.default.profile);
  }
  const r = new _serviceRegistryLib.Registry(_commander2.default.env, _commander2.default.mode, opts);
  r.catalog().search(criteria).then(services => {
    const catalogIds = services.map(service => service.definition.id);
    console.log(JSON.stringify(catalogIds, null, 2));
  }).catch(error => {
    console.warn(error);
    process.exit(1);
  });
});

_commander2.default.command('get <id>').description('get catalog entry for given key, if it exists').action(id => {
  const opts = {};
  if (_commander2.default.profile) {
    opts.credentials = (0, _getAWSCredentials2.default)(_commander2.default.profile);
  }
  const r = new _serviceRegistryLib.Registry(_commander2.default.env, _commander2.default.mode, opts);
  r.catalog().get(id).then(entry => {
    console.log(JSON.stringify(entry, null, 2));
  }, error => {
    console.warn(error);
    process.exit(1);
  });
});

_commander2.default.parse(process.argv);

if (!process.argv.slice(2).length) {
  _commander2.default.outputHelp();
}