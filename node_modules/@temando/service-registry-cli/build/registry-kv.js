#!/usr/bin/env node
'use strict';

var _commander = require('commander');

var _commander2 = _interopRequireDefault(_commander);

var _serviceRegistryLib = require('@temando/service-registry-lib');

var _getAWSCredentials = require('./lib/getAWSCredentials');

var _getAWSCredentials2 = _interopRequireDefault(_getAWSCredentials);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_commander2.default.option('-e, --env <env>', 'the environment the registry is', 'dev').option('-m, --mode <mode>', 'set the mode, s3 or local', 's3').option('--profile <profile>', 'AWS profile to use when communicating with Amazon S3');

_commander2.default.command('list').description('list known keys in the kv store').action(() => {
  const opts = {};
  if (_commander2.default.profile) {
    opts.credentials = (0, _getAWSCredentials2.default)(_commander2.default.profile);
  }
  const r = new _serviceRegistryLib.Registry(_commander2.default.env, _commander2.default.mode, opts);
  r.kv().listAll().then(keys => {
    console.log(keys);
  }).catch(error => {
    console.warn(error);
    process.exit(1);
  });
});

_commander2.default.command('get <key>').description('get value for given key, if exists').action(key => {
  const opts = {};
  if (_commander2.default.profile) {
    opts.credentials = (0, _getAWSCredentials2.default)(_commander2.default.profile);
  }
  const r = new _serviceRegistryLib.Registry(_commander2.default.env, _commander2.default.mode, opts);
  r.kv().get(key).then(value => {
    console.log('%s', value);
  }).catch(error => {
    console.warn(error);
    process.exit(1);
  });
});

_commander2.default.command('set <key> <value>').description('sets a value for the given key').action((key, value) => {
  const opts = {};
  if (_commander2.default.profile) {
    opts.credentials = (0, _getAWSCredentials2.default)(_commander2.default.profile);
  }
  const r = new _serviceRegistryLib.Registry(_commander2.default.env, _commander2.default.mode, opts);
  // value = JSON.parse(value); // @todo make some sort of magic cli option parser.
  r.kv().set(key, value).then(() => {
    console.log('Successfully set %s to %s', key, value);
  }).catch(error => {
    console.warn(error);
    process.exit(1);
  });
});

_commander2.default.parse(process.argv);

if (!process.argv.slice(2).length) {
  _commander2.default.outputHelp();
}