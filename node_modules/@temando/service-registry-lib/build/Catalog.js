'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _sift = require('sift');

var _sift2 = _interopRequireDefault(_sift);

var _Schemas = require('./Schemas');

var _Schemas2 = _interopRequireDefault(_Schemas);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Catalog = function () {
  /**
   * Constructor accepts a class that represents a `fs`
   *
   * @param  {fs} fs
   */
  function Catalog(fs) {
    _classCallCheck(this, Catalog);

    this.fs = fs;
    this.schemas = new _Schemas2.default();
  }

  /**
   * Retrieve an entry from the catalog by ID
   *
   * @param  {String} id
   * @return {Object}
   */


  _createClass(Catalog, [{
    key: 'get',
    value: function () {
      var _ref = (0, _bluebird.coroutine)(function* (id) {
        return yield this.fs.read(`service/${id}.json`);
      });

      function get(_x) {
        return _ref.apply(this, arguments);
      }

      return get;
    }()

    /**
     * Return all the catalog entries
     *
     * @return {Promise}
     */

  }, {
    key: 'all',
    value: function () {
      var _ref2 = (0, _bluebird.coroutine)(function* () {
        var _this = this;

        var serviceIds = yield this.listAll();
        var promises = serviceIds.map(function (id) {
          return _this.get(id);
        });

        return _bluebird2.default.all(promises);
      });

      function all() {
        return _ref2.apply(this, arguments);
      }

      return all;
    }()

    /**
     * Return all the catalog entries that match the search criteria
     *
     * @param  {Object} criteria  Json criteria, as described on https://github.com/mirek/node-json-criteria
     *
     * @return {Array.Object}
     */

  }, {
    key: 'search',
    value: function () {
      var _ref3 = (0, _bluebird.coroutine)(function* (criteria) {
        var allServices = yield this.all();

        return (0, _sift2.default)(criteria, allServices);
      });

      function search(_x2) {
        return _ref3.apply(this, arguments);
      }

      return search;
    }()

    /**
     * Returns an array of catalog keys
     *
     * @return {Array}
     */

  }, {
    key: 'listAll',
    value: function () {
      var _ref4 = (0, _bluebird.coroutine)(function* () {
        var services = yield this.fs.list('service/');

        return services.map(function (service) {
          return service.replace('.json', '').replace(/^service\//, '');
        }).filter(function (service) {
          return service !== '';
        });
      });

      function listAll() {
        return _ref4.apply(this, arguments);
      }

      return listAll;
    }()

    /**
     * Accepts an object that adheres to `service-catalog-entry+v1#` and adds it
     * into the catalog.
     *
     * @param  {Object} entry
     * @return {Promise}
     */

  }, {
    key: 'put',
    value: function () {
      var _ref5 = (0, _bluebird.coroutine)(function* (entry) {
        var entryData = entry;
        entryData.$schema = 'http://service-registry.temando.com/schema/service-catalog-entry+v1#';
        this.schemas.validate(entryData);
        return this.fs.write(`service/${entryData.definition.id}.json`, entryData);
      });

      function put(_x3) {
        return _ref5.apply(this, arguments);
      }

      return put;
    }()

    /**
     * Adds a deployment (`service-deployment+v1#`) to a catalog entry given by `id`.
     *
     * @param  {String} id
     * @param  {Object} deployment
     * @return {Promise}
     */

  }, {
    key: 'putDeployment',
    value: function () {
      var _ref6 = (0, _bluebird.coroutine)(function* (id, deployment) {
        var deploymentData = deployment;
        var entry = yield this.get(id);

        // helps clean up older services.
        if (!entry.hasOwnProperty('deployments')) {
          entry.deployments = [];
        }

        deploymentData.$schema = 'http://service-registry.temando.com/schema/service-deployment+v1#';
        this.schemas.validate(deploymentData);

        entry.deployments = entry.deployments.filter(function (cur) {
          return cur.region !== deploymentData.region;
        });
        entry.deployments.push(deploymentData);

        return this.put(entry);
      });

      function putDeployment(_x4, _x5) {
        return _ref6.apply(this, arguments);
      }

      return putDeployment;
    }()
  }]);

  return Catalog;
}();

exports.default = Catalog;
module.exports = exports['default'];