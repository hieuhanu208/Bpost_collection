'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _bluebird = require('bluebird');

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ArrayFileSystem = function () {
  function ArrayFileSystem() {
    _classCallCheck(this, ArrayFileSystem);

    this.arr = {};
  }

  _createClass(ArrayFileSystem, [{
    key: 'read',
    value: function () {
      var _ref = (0, _bluebird.coroutine)(function* (key) {
        if (this.arr.hasOwnProperty(key)) {
          return this.arr[key];
        }

        throw new Error('key not found');
      });

      function read(_x) {
        return _ref.apply(this, arguments);
      }

      return read;
    }()
  }, {
    key: 'write',
    value: function () {
      var _ref2 = (0, _bluebird.coroutine)(function* (key, data) {
        this.arr[key] = data;

        return true;
      });

      function write(_x2, _x3) {
        return _ref2.apply(this, arguments);
      }

      return write;
    }()
  }, {
    key: 'list',
    value: function () {
      var _ref3 = (0, _bluebird.coroutine)(function* (prefix) {
        // @todo - remove me when done
        void prefix; // eslint-disable-line
        var entries = Object.getOwnPropertyNames(this.arr);

        return entries;
      });

      function list(_x4) {
        return _ref3.apply(this, arguments);
      }

      return list;
    }()
  }, {
    key: 'reset',
    value: function reset() {
      this.arr = {};
    }
  }]);

  return ArrayFileSystem;
}();

exports.default = ArrayFileSystem;
module.exports = exports['default'];