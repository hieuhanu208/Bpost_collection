'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _bluebird = require('bluebird');

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var S3FileSystem = function () {
  /**
   * Constructor.
   *
   * @param {aws-sdk} awsSdk
   * @param {String}  bucket
   * @param {Object}  options
   */
  function S3FileSystem(awsSdk, bucket, options) {
    _classCallCheck(this, S3FileSystem);

    this.awsSdk = awsSdk;
    this.bucket = bucket;
    this.s3 = new this.awsSdk.S3(this.getOptions(options));
  }

  /**
   * Merges the given `options` with the default options for initialising
   * the AWS SDK instance.
   *
   * @param  {Object} options
   * @return {Object}
   */


  _createClass(S3FileSystem, [{
    key: 'getOptions',
    value: function getOptions(options) {
      return Object.assign({
        signatureVersion: 'v4',
        params: {
          Bucket: this.bucket
        }
      }, options);
    }

    /**
     * Returns the contents of the given `key` in this file system.
     *
     * @param  {String} key
     * @return {Promise<String>}
     */

  }, {
    key: 'read',
    value: function () {
      var _ref = (0, _bluebird.coroutine)(function* (key) {
        try {
          var data = yield this.s3.getObject({ Key: key }).promise();

          return JSON.parse(data.Body.toString());
        } catch (err) {
          throw err;
        }
      });

      function read(_x) {
        return _ref.apply(this, arguments);
      }

      return read;
    }()

    /**
     * Writes the given `data` as a JSON-formatted string to a file specified
     * by the given `key`.
     *
     * @param  {String} key
     * @param  {String} data
     * @return {Promise<String>} The name of the file that was written.
     */

  }, {
    key: 'write',
    value: function () {
      var _ref2 = (0, _bluebird.coroutine)(function* (key, data) {
        try {
          var result = yield this.s3.upload({ Key: key, Body: JSON.stringify(data) }).promise();

          return result.key;
        } catch (err) {
          throw err;
        }
      });

      function write(_x2, _x3) {
        return _ref2.apply(this, arguments);
      }

      return write;
    }()

    /**
     * Returns a list of filenames (key) from the file system.
     *
     * @param  {String} prefix If provided, only files that match this prefix will be returned
     * @return {Array<String>}        [description]
     */

  }, {
    key: 'list',
    value: function () {
      var _ref3 = (0, _bluebird.coroutine)(function* (prefix) {
        return yield S3FileSystem.handleListAllObjects(this.s3, this.bucket, null, prefix);
      });

      function list(_x4) {
        return _ref3.apply(this, arguments);
      }

      return list;
    }()

    /**
     * Private method that will recursively invoke S3 to find all files that match
     * the given `prefix`.
     *
     * @private
     * @see {@link list}
     * @param  {S3} s3
     * @param  {String} bucket
     * @param  {String} marker
     * @param  {String} prefix
     * @return {Array<String>}
     */

  }], [{
    key: 'handleListAllObjects',
    value: function () {
      var _ref4 = (0, _bluebird.coroutine)(function* (s3, bucket, marker, prefix) {
        var keys = [];

        try {
          var data = yield s3.listObjectsV2({
            Bucket: bucket,
            Prefix: prefix,
            ContinuationToken: marker
          }).promise();

          data.Contents.forEach(function (object) {
            if (/\.json$/.test(object.Key)) {
              keys.push(object.Key);
            }
          });

          if (data.IsTruncated) {
            var chainedKeys = yield S3FileSystem.handleListAllObjects(s3, bucket, data.NextContinuationToken, prefix);

            keys = chainedKeys.concat(keys);
          }

          return keys;
        } catch (err) {
          throw err;
        }
      });

      function handleListAllObjects(_x5, _x6, _x7, _x8) {
        return _ref4.apply(this, arguments);
      }

      return handleListAllObjects;
    }()
  }]);

  return S3FileSystem;
}();

exports.default = S3FileSystem;
module.exports = exports['default'];