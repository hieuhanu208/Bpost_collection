'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _bluebird = require('bluebird');

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var KvStorage = function () {
  /**
   * Constructor accepts a class that represents a `fs`
   *
   * @param  {fs} fs
   */
  function KvStorage(fs) {
    _classCallCheck(this, KvStorage);

    this.fs = fs;
  }

  /**
   * Returns an array of keys that are in storage
   *
   * @return {Array}
   */


  _createClass(KvStorage, [{
    key: 'listAll',
    value: function () {
      var _ref = (0, _bluebird.coroutine)(function* () {
        var keys = yield this.fs.list('kv/');

        return keys.map(function (key) {
          return key.replace('.json', '').replace(/^kv\//, '');
        }).filter(function (key) {
          return key !== '';
        });
      });

      function listAll() {
        return _ref.apply(this, arguments);
      }

      return listAll;
    }()

    /**
     * Retrieve a key/value object by the key
     *
     * @param  {String} key
     * @return {Promise}
     */

  }, {
    key: 'get',
    value: function () {
      var _ref2 = (0, _bluebird.coroutine)(function* (key) {
        return yield this.fs.read(`kv/${key}.json`);
      });

      function get(_x) {
        return _ref2.apply(this, arguments);
      }

      return get;
    }()

    /**
     * Add a new key/value object given the `key` and the `value`
     *
     * @param {String} key
     * @param {Mixed} value
     * @return {Promise}
     */

  }, {
    key: 'set',
    value: function () {
      var _ref3 = (0, _bluebird.coroutine)(function* (key, value) {
        return yield this.fs.write(`kv/${key}.json`, value);
      });

      function set(_x2, _x3) {
        return _ref3.apply(this, arguments);
      }

      return set;
    }()
  }]);

  return KvStorage;
}();

exports.default = KvStorage;
module.exports = exports['default'];