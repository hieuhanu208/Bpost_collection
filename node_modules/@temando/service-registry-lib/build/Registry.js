'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _awsSdk = require('aws-sdk');

var _awsSdk2 = _interopRequireDefault(_awsSdk);

var _S3FileSystem = require('./Filesystem/S3FileSystem');

var _S3FileSystem2 = _interopRequireDefault(_S3FileSystem);

var _LocalFileSystem = require('./Filesystem/LocalFileSystem');

var _LocalFileSystem2 = _interopRequireDefault(_LocalFileSystem);

var _KvStorage = require('./KvStorage');

var _KvStorage2 = _interopRequireDefault(_KvStorage);

var _Catalog = require('./Catalog');

var _Catalog2 = _interopRequireDefault(_Catalog);

var _ServiceManager = require('./ServiceManager');

var _ServiceManager2 = _interopRequireDefault(_ServiceManager);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

_awsSdk2.default.config.setPromisesDependency(require('bluebird'));

// Basically just a factory with configuration.

var Registry = function () {
  /**
   * Construct a registry given an `env`, `mode` and `options`.
   * `options` is only used when the mode is `s3`, where the
   * properties can be any of the AWS SDK configuration params.
   *
   * @param  {String} env     Defaults to `dev`.
   * @param  {String} mode    Defaults to `s3`.
   * @param  {Object} options Used when `mode` is `s3`.
   */
  function Registry() {
    var env = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'dev';
    var mode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 's3';
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    _classCallCheck(this, Registry);

    this.env = env;
    this.mode = mode;
    this.options = options;
  }

  /**
   * Returns the KvStorage for the specified mode
   *
   * @return {KvStorage}
   */


  _createClass(Registry, [{
    key: 'kv',
    value: function kv() {
      return new _KvStorage2.default(this.fs());
    }

    /**
     * Returns the Catalog for the specified mode
     *
     * @return {Catalog}
     */

  }, {
    key: 'catalog',
    value: function catalog() {
      return new _Catalog2.default(this.fs());
    }

    /**
     * Return the Service Manger
     *
     * @return {ServiceManager}
     */

  }, {
    key: 'sm',
    value: function sm() {
      return new _ServiceManager2.default();
    }

    /**
     * Returns the `FileSystem` from the registry's mode
     *
     * @throws Error when the mode is not supported
     * @return {FileSystem}
     */

  }, {
    key: 'fs',
    value: function fs() {
      switch (this.mode) {
        case 's3':
          return new _S3FileSystem2.default(_awsSdk2.default, `temando-service-registry-${this.env}-state`, this.options);
        case 'local':
          return new _LocalFileSystem2.default(`/tmp/${this.env}`); // @todo
        default:
          throw new Error(`Cannot create a filesystem for mode "${this.mode}"!`);
      }
    }
  }]);

  return Registry;
}();

exports.default = Registry;
module.exports = exports['default'];