'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ajv = require('ajv');

var _ajv2 = _interopRequireDefault(_ajv);

var _serviceCatalogEntryV = require('./schema/service-catalog-entry+v1.json');

var _serviceCatalogEntryV2 = _interopRequireDefault(_serviceCatalogEntryV);

var _serviceDefinitionV = require('./schema/service-definition+v1.json');

var _serviceDefinitionV2 = _interopRequireDefault(_serviceDefinitionV);

var _serviceDeploymentV = require('./schema/service-deployment+v1.json');

var _serviceDeploymentV2 = _interopRequireDefault(_serviceDeploymentV);

var _serviceEnvV = require('./schema/service-env+v1.json');

var _serviceEnvV2 = _interopRequireDefault(_serviceEnvV);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Schemas = function () {
  function Schemas() {
    _classCallCheck(this, Schemas);

    this.ajv = new _ajv2.default({
      useDefaults: true,
      allErrors: true
    });

    this.ajv.addSchema(_serviceDefinitionV2.default);
    this.ajv.addSchema(_serviceCatalogEntryV2.default);
    this.ajv.addSchema(_serviceDeploymentV2.default);
    this.ajv.addSchema(_serviceEnvV2.default);
  }

  _createClass(Schemas, [{
    key: 'validate',
    value: function validate(obj) {
      if (this.isValid(obj)) {
        return true;
      }

      throw new Error(`Could not validate against ${obj.$schema}\n` + `The following errors have been found:\n${JSON.stringify(this.ajv.errors)}`);
    }
  }, {
    key: 'isValid',
    value: function isValid(obj) {
      return this.ajv.validate(obj.$schema, obj);
    }
  }]);

  return Schemas;
}();

exports.default = Schemas;
module.exports = exports['default'];