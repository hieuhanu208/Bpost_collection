"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var Bluebird = require("bluebird");
var fs_extra_1 = require("fs-extra");
var isStream = require("is-stream");
var lutils_1 = require("lutils");
var path = require("path");
var requireResolve = require("resolve-pkg");
var WebpackBuilder_1 = require("./WebpackBuilder");
var FileBuild = (function () {
    function FileBuild(config) {
        Object.assign(this, config);
        this.externals = new Set();
        this.webpackBuilder = new WebpackBuilder_1.WebpackBuilder({
            logger: this.logger,
            buildTmpDir: this.buildTmpDir,
            servicePath: this.servicePath,
        });
        try {
            // Register TypeScript for requiring if possible
            require(requireResolve('ts-node/register', { cwd: this.servicePath }));
        }
        catch (err) { }
    }
    /**
     *  Handles building from a build file's output.
     */
    FileBuild.prototype.build = function (fnConfig, archive) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var builderFilePath, entryRelPath, entryPoint, buildFilename, result, webpackConfig, externals;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.tryBuildFiles()];
                    case 1:
                        builderFilePath = _a.sent();
                        if (!builderFilePath) {
                            throw new Error('Unrecognized build file path');
                        }
                        builderFilePath = path.resolve(this.servicePath, builderFilePath);
                        entryRelPath = "" + fnConfig.handler.split(/\.[^.]+$/)[0];
                        entryPoint = "./" + entryRelPath + "." + this.handlerEntryExt;
                        buildFilename = "./" + entryRelPath + ".js";
                        result = require(builderFilePath);
                        // Fudge to default exports
                        if (result instanceof Object && result.default) {
                            result = result.default;
                        }
                        if (!lutils_1.isFunction(result)) return [3 /*break*/, 3];
                        return [4 /*yield*/, Bluebird.try(function () { return result(fnConfig, _this, { entryRelPath: entryRelPath, entryPoint: entryPoint, buildFilename: buildFilename }); })];
                    case 2:
                        result = _a.sent();
                        _a.label = 3;
                    case 3:
                        if (!lutils_1.isObject(result)) return [3 /*break*/, 6];
                        webpackConfig = lutils_1.clone(result);
                        lutils_1.merge(webpackConfig, {
                            entry: __spread((webpackConfig.entry || []), [entryPoint]),
                            output: {
                                filename: buildFilename,
                            },
                        });
                        return [4 /*yield*/, this.webpackBuilder.build(webpackConfig)];
                    case 4:
                        externals = _a.sent();
                        externals && externals.forEach(function (ext) { return _this.externals.add(ext); });
                        return [4 /*yield*/, Bluebird.each([
                                buildFilename, buildFilename + ".map",
                            ], function (relPath) { return __awaiter(_this, void 0, void 0, function () {
                                var filePath;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0:
                                            filePath = path.resolve(this.buildTmpDir, relPath);
                                            return [4 /*yield*/, fs_extra_1.existsSync(filePath)];
                                        case 1:
                                            if (!(_a.sent())) {
                                                return [2 /*return*/];
                                            }
                                            archive.file(filePath, { name: relPath });
                                            return [2 /*return*/];
                                    }
                                });
                            }); })];
                    case 5:
                        _a.sent();
                        return [3 /*break*/, 7];
                    case 6:
                        if (lutils_1.isString(result) || result instanceof Buffer) {
                            //
                            // STRINGS, BUFFERS
                            //
                            if (lutils_1.isString(result)) {
                                result = new Buffer(result);
                            }
                            archive.append(result, { name: entryPoint });
                        }
                        else if (isStream(result)) {
                            //
                            // STREAMS
                            //
                            archive.append(result, { name: entryPoint });
                        }
                        else {
                            throw new Error('Unrecognized build output');
                        }
                        _a.label = 7;
                    case 7: return [2 /*return*/, this];
                }
            });
        });
    };
    /**
     *  Allows for build files to be auto selected
     */
    FileBuild.prototype.tryBuildFiles = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a, _b, fileName, e_1_1, e_1, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _d.trys.push([0, 5, 6, 7]);
                        _a = __values(this.tryFiles), _b = _a.next();
                        _d.label = 1;
                    case 1:
                        if (!!_b.done) return [3 /*break*/, 4];
                        fileName = _b.value;
                        return [4 /*yield*/, fs_extra_1.existsSync(fileName)];
                    case 2:
                        if (_d.sent()) {
                            return [2 /*return*/, fileName];
                        }
                        _d.label = 3;
                    case 3:
                        _b = _a.next();
                        return [3 /*break*/, 1];
                    case 4: return [3 /*break*/, 7];
                    case 5:
                        e_1_1 = _d.sent();
                        e_1 = { error: e_1_1 };
                        return [3 /*break*/, 7];
                    case 6:
                        try {
                            if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                        }
                        finally { if (e_1) throw e_1.error; }
                        return [7 /*endfinally*/];
                    case 7: return [2 /*return*/, null];
                }
            });
        });
    };
    return FileBuild;
}());
exports.FileBuild = FileBuild;
//# sourceMappingURL=FileBuild.js.map