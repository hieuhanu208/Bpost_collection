"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var Bluebird = require("bluebird");
var path_1 = require("path");
var resolvePackage = require("resolve-pkg");
var fs_extra_1 = require("fs-extra");
var utils_1 = require("./lib/utils");
var Walker_1 = require("./lib/Walker");
var Uglify_1 = require("./transforms/Uglify");
/**
 *  @class ModuleBundler
 *
 *  Handles the inclusion of node_modules.
 */
var ModuleBundler = (function () {
    function ModuleBundler(config) {
        Object.assign(this, config);
    }
    /**
     *  Determines module locations then adds them into ./node_modules
     *  inside the artifact.
     */
    ModuleBundler.prototype.bundle = function (_a) {
        var _b = _a.include, include = _b === void 0 ? [] : _b, _c = _a.exclude, exclude = _c === void 0 ? [] : _c, _d = _a.deepExclude, deepExclude = _d === void 0 ? [] : _d;
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var links, _a, transforms, readModule;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, Walker_1.findSymlinks(path_1.join(this.servicePath, 'node_modules'))];
                    case 1:
                        links = _b.sent();
                        _a = this;
                        return [4 /*yield*/, this.resolveDependencies(this.servicePath, { include: include, exclude: exclude, deepExclude: deepExclude, links: links })];
                    case 2:
                        _a.modules = _b.sent();
                        return [4 /*yield*/, this.resolveTransforms()];
                    case 3:
                        transforms = _b.sent();
                        readModule = function (_a) {
                            var packagePath = _a.packagePath, packageDir = _a.packageDir, relativePath = _a.relativePath, packageJson = _a.packageJson;
                            return __awaiter(_this, void 0, void 0, function () {
                                var _this = this;
                                var filter, onFile, walker;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0:
                                            filter = function (dirPath, stats) {
                                                var _a = _this.resolveSymlinkPath(dirPath, links), linkedPath = _a.linkedPath, link = _a.link;
                                                var testPackagePath = packagePath;
                                                if (linkedPath) {
                                                    dirPath = linkedPath;
                                                    testPackagePath = link;
                                                }
                                                if (!dirPath || !testPackagePath) {
                                                    return true;
                                                }
                                                // This pulls ['node_modules', 'pack'] out of
                                                // .../node_modules/package/node_modules/pack
                                                var endParts = dirPath.split(testPackagePath)[1].split('/').slice(-2);
                                                // When a directory is a package and matches a deep exclude pattern
                                                // Then skip it
                                                if (endParts[0] === 'node_modules' &&
                                                    deepExclude.indexOf(endParts[1]) !== -1) {
                                                    return false;
                                                }
                                                return true;
                                            };
                                            onFile = function (filePath, stats) { return __awaiter(_this, void 0, void 0, function () {
                                                var relPath, relLinkedPath;
                                                return __generator(this, function (_a) {
                                                    switch (_a.label) {
                                                        case 0:
                                                            relLinkedPath = this.resolveSymlinkPath(filePath, links).relLinkedPath;
                                                            if (relLinkedPath) {
                                                                relPath = path_1.join(relativePath, relLinkedPath);
                                                            }
                                                            if (!relPath) {
                                                                relPath = filePath.substr(filePath.indexOf(relativePath));
                                                            }
                                                            relPath = relPath.replace(/^\/|\/$/g, '');
                                                            return [4 /*yield*/, utils_1.handleFile({
                                                                    filePath: filePath,
                                                                    relPath: relPath,
                                                                    transforms: transforms,
                                                                    transformExtensions: ['js', 'jsx'],
                                                                    useSourceMaps: false,
                                                                    archive: this.archive,
                                                                })];
                                                        case 1:
                                                            _a.sent();
                                                            return [2 /*return*/];
                                                    }
                                                });
                                            }); };
                                            walker = new Walker_1.Walker(packagePath)
                                                .filter(filter)
                                                .file(onFile);
                                            return [4 /*yield*/, walker.end()];
                                        case 1:
                                            _a.sent();
                                            return [4 /*yield*/, this.logger.module(({ filePath: relativePath, realPath: packagePath, packageJson: packageJson }))];
                                        case 2:
                                            _a.sent();
                                            return [2 /*return*/];
                                    }
                                });
                            });
                        };
                        return [4 /*yield*/, Bluebird.map(this.modules, readModule)];
                    case 4:
                        _b.sent();
                        return [2 /*return*/, this];
                }
            });
        });
    };
    ModuleBundler.prototype.resolveTransforms = function () {
        return __awaiter(this, void 0, void 0, function () {
            var transforms, uglifyConfig;
            return __generator(this, function (_a) {
                transforms = [];
                uglifyConfig = this.uglify;
                if (uglifyConfig) {
                    if (uglifyConfig === true) {
                        uglifyConfig = null;
                    }
                    transforms.push(new Uglify_1.UglifyTransform(uglifyConfig, this));
                }
                return [2 /*return*/, transforms];
            });
        });
    };
    ModuleBundler.prototype.resolveSymlinkPath = function (filePath, links) {
        var items = Array.from(links.entries()).reverse();
        try {
            // Get a relPath from using a matching symlink
            for (var items_1 = __values(items), items_1_1 = items_1.next(); !items_1_1.done; items_1_1 = items_1.next()) {
                var _a = __read(items_1_1.value, 2), real = _a[0], link = _a[1];
                if (filePath.startsWith(real)) {
                    var relLinkedPath = filePath.slice(real.length);
                    return {
                        real: real, link: link,
                        relLinkedPath: relLinkedPath,
                        linkedPath: path_1.join(link, relLinkedPath),
                    };
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (items_1_1 && !items_1_1.done && (_b = items_1.return)) _b.call(items_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return {};
        var e_1, _b;
    };
    /**
     * Resolves a package's dependencies to an array of paths.
     */
    ModuleBundler.prototype.resolveDependencies = function (initialPackageDir, _a) {
        var _b = _a === void 0 ? {} : _a, _c = _b.include, include = _c === void 0 ? [] : _c, _d = _b.exclude, exclude = _d === void 0 ? [] : _d, _e = _b.deepExclude, deepExclude = _e === void 0 ? [] : _e, _f = _b.links, links = _f === void 0 ? new Map() : _f;
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var resolvedDeps, cache, separator, recurse;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        resolvedDeps = [];
                        cache = new Set();
                        separator = path_1.sep + "node_modules" + path_1.sep;
                        recurse = function (packageDir, _include, _exclude) {
                            if (_include === void 0) { _include = []; }
                            if (_exclude === void 0) { _exclude = []; }
                            return __awaiter(_this, void 0, void 0, function () {
                                var _this = this;
                                var packageJson, name, dependencies, result;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0:
                                            packageJson = require(path_1.join(packageDir, './package.json'));
                                            name = packageJson.name, dependencies = packageJson.dependencies;
                                            result = {
                                                name: name,
                                                packageDir: packageDir,
                                                packagePath: packageDir,
                                            };
                                            if (!dependencies) {
                                                return [2 /*return*/, result];
                                            }
                                            return [4 /*yield*/, Bluebird.map(Object.keys(dependencies), function (packageName) { return __awaiter(_this, void 0, void 0, function () {
                                                    var resolvedDir, childPackageJsonPath, childPackageJson, nextPackagePath, link, relativePath, childResult;
                                                    return __generator(this, function (_a) {
                                                        switch (_a.label) {
                                                            case 0:
                                                                /**
                                                                 *  Skips on exclude matches, if set
                                                                 *  Skips on include mis-matches, if set
                                                                 */
                                                                if (_exclude.length && _exclude.indexOf(packageName) > -1) {
                                                                    return [2 /*return*/];
                                                                }
                                                                if (_include.length && _include.indexOf(packageName) < 0) {
                                                                    return [2 /*return*/];
                                                                }
                                                                resolvedDir = resolvePackage(packageName, { cwd: packageDir });
                                                                childPackageJsonPath = path_1.join(resolvedDir, './package.json');
                                                                return [4 /*yield*/, fs_extra_1.existsSync(childPackageJsonPath)];
                                                            case 1:
                                                                if (_a.sent()) {
                                                                    childPackageJson = require(childPackageJsonPath); // eslint-disable-line
                                                                }
                                                                if (!resolvedDir) {
                                                                    return [2 /*return*/];
                                                                }
                                                                nextPackagePath = resolvedDir;
                                                                link = links.get(resolvedDir);
                                                                if (link) {
                                                                    resolvedDir = link;
                                                                }
                                                                relativePath = path_1.join('node_modules', resolvedDir.split(separator).slice(1).join(separator));
                                                                if (cache.has(relativePath)) {
                                                                    return [2 /*return*/];
                                                                }
                                                                cache.add(relativePath);
                                                                return [4 /*yield*/, recurse(nextPackagePath, undefined, deepExclude)];
                                                            case 2:
                                                                childResult = _a.sent();
                                                                resolvedDeps.push(__assign({}, childResult, { packageDir: packageDir, relativePath: relativePath, packageJson: childPackageJson }));
                                                                return [2 /*return*/];
                                                        }
                                                    });
                                                }); })];
                                        case 1:
                                            _a.sent();
                                            return [2 /*return*/, result];
                                    }
                                });
                            });
                        };
                        return [4 /*yield*/, recurse(initialPackageDir, include, exclude)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, resolvedDeps];
                }
            });
        });
    };
    return ModuleBundler;
}());
exports.ModuleBundler = ModuleBundler;
//# sourceMappingURL=ModuleBundler.js.map