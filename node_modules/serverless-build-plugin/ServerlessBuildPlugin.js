"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var Archiver = require("archiver");
var Bluebird = require("bluebird");
var c = require("chalk");
var fs_extra_1 = require("fs-extra");
var lutils_1 = require("lutils");
var path = require("path");
var semver = require("semver");
var config_1 = require("./config");
var FileBuild_1 = require("./FileBuild");
var Logger_1 = require("./lib/Logger");
var utils_1 = require("./lib/utils");
var ModuleBundler_1 = require("./ModuleBundler");
var SourceBundler_1 = require("./SourceBundler");
var ServerlessBuildPlugin = (function () {
    function ServerlessBuildPlugin(serverless, options) {
        //
        // SERVERLESS
        //
        if (options === void 0) { options = {}; }
        var _this = this;
        this.config = config_1.defaultConfig;
        /**
         *  Builds either from file or through babel
         */
        this.build = function () { return __awaiter(_this, void 0, void 0, function () {
            var _this = this;
            var reduceConfig;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.logger.message('BUILDS', 'Initializing');
                        this.logger.log('');
                        reduceConfig = function (keys) {
                            return keys.reduce(function (obj, key) {
                                obj[key] = _this.config[key];
                                return obj;
                            }, {});
                        };
                        if (this.config.method === 'file') {
                            this.logger.config(reduceConfig([
                                'method', 'tryFiles', 'handlerEntryExt',
                                'synchronous', 'deploy', 'useServerlessOffline',
                                'modules', 'zip',
                            ]));
                        }
                        else {
                            this.logger.config(reduceConfig([
                                'method',
                                'synchronous', 'deploy', 'useServerlessOffline',
                                'babel', 'uglify', 'uglifySource', 'uglifyModules',
                                'normalizeBabelExt', 'sourceMaps', 'transformExtensions',
                                'baseExclude',
                                'modules', 'include', 'exclude', 'zip',
                            ]));
                        }
                        // Ensure directories
                        return [4 /*yield*/, fs_extra_1.ensureDir(this.buildTmpDir)];
                    case 1:
                        // Ensure directories
                        _a.sent();
                        return [4 /*yield*/, fs_extra_1.ensureDir(this.artifactTmpDir)];
                    case 2:
                        _a.sent();
                        if (!!this.config.keep) return [3 /*break*/, 4];
                        return [4 /*yield*/, fs_extra_1.emptyDir(this.artifactTmpDir)];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4: 
                    /**
                     * Iterate functions and run builds either synchronously or concurrently
                     */
                    return [4 /*yield*/, Bluebird.map(Object.keys(this.functions), function (name) {
                            var config = _this.functions[name];
                            return _this.buildFunction(name, config);
                        }, {
                            concurrency: this.config.synchronous ? 1 : Infinity,
                        })];
                    case 5:
                        /**
                         * Iterate functions and run builds either synchronously or concurrently
                         */
                        _a.sent();
                        this.logger.log('');
                        this.logger.message('BUILDS', 'Complete!');
                        this.logger.log('');
                        if (!(this.config.deploy === false)) return [3 /*break*/, 7];
                        this.logger.message('EXIT', 'User requested via --no-deploy');
                        return [4 /*yield*/, Bluebird.delay(1)];
                    case 6:
                        _a.sent();
                        process.exit();
                        _a.label = 7;
                    case 7: return [2 /*return*/];
                }
            });
        }); };
        /**
         * Mutates `packageFunction` on the `Package` serverless built-in plugin
         * in order to intercept
         */
        this.overridePackagePlugin = function () {
            var packagePlugin = _this.serverless.pluginManager.plugins.find(function (item) {
                return item.constructor.name === 'Package';
            });
            packagePlugin.packageFunction = function (fnName) { return __awaiter(_this, void 0, void 0, function () {
                var fnConfig, artifactPath, packageFilePath;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            fnConfig = this.serverless.service.functions[fnName];
                            artifactPath = fnConfig.artifact || (fnConfig.package && fnConfig.package.artifact);
                            if (!artifactPath) {
                                throw new Error("Artifact path not found for function " + fnName);
                            }
                            packageFilePath = path.join(this.tmpDir, "./" + fnName + ".zip");
                            return [4 /*yield*/, fs_extra_1.copy(artifactPath, packageFilePath)];
                        case 1:
                            _a.sent();
                            fnConfig.artifact = artifactPath;
                            return [2 /*return*/, artifactPath];
                    }
                });
            }); };
        };
        this.logger = new Logger_1.Logger({ serverless: serverless });
        this.serverless = serverless;
        var version = this.serverless.getVersion();
        if (semver.lt(version, '1.0.0')) {
            throw new this.serverless.classes.Error('serverless-build-plugin requires serverless@1.x.x');
        }
        this.servicePath = this.serverless.config.servicePath;
        this.tmpDir = path.join(this.servicePath, './.serverless');
        this.buildTmpDir = path.join(this.tmpDir, './build');
        this.artifactTmpDir = path.join(this.tmpDir, './artifacts');
        //
        // COMPATIBILITY
        //
        // Put the package plugin into 'individual' mode
        this.serverless.service.package.individually = true;
        // In sls 1.11 and lower this will skip 'archiving' (no effect in 1.12+)
        this.serverless.service.package.artifact = true;
        if (semver.lt(version, '1.12.0')) {
            this.logger.message(c.red('DEPRECATION'), 'Upgrade to >= serverless@1.12. Build plugin is dropping support in the next major version');
        }
        //
        // PLUGIN CONFIG GENERATION
        //
        var buildConfigPath = path.join(this.servicePath, './serverless.build.yml');
        var buildConfig = utils_1.loadFile(buildConfigPath) || {};
        var serverlessCustom = this.serverless.service.custom || {};
        // The config inherits from multiple sources
        this.config = lutils_1.merge(this.config, lutils_1.clone(serverlessCustom.build || {}), lutils_1.clone(buildConfig), lutils_1.clone(options));
        var functions = this.serverless.service.functions;
        var functionSelection = this.config.f || this.config.function;
        var selectedFunctions = lutils_1.isArray(functionSelection)
            ? functionSelection
            : [functionSelection];
        selectedFunctions = selectedFunctions.filter(function (key) { return key in functions; });
        selectedFunctions = selectedFunctions.length ? selectedFunctions : Object.keys(functions);
        /**
         *  An array of realized functions configs to build against.
         *  Inherits from
         *  - serverless.yml functions.<fn>.package
         *  - serverless.build.yml functions.<fn>
         *
         *  in order to generate `include`, `exclude`
         */
        this.functions = selectedFunctions.reduce(function (obj, fnKey) {
            var fnCfg = functions[fnKey];
            var fnBuildCfg = _this.config.functions[fnKey] || {};
            var include = __spread((_this.config.include || []), ((fnCfg.package && fnCfg.package.include) || []), (fnBuildCfg.include || []));
            var exclude = __spread((_this.config.baseExclude || []), (_this.config.exclude || []), ((fnCfg.package && fnCfg.package.exclude) || []), (fnBuildCfg.exclude || []));
            // Utilize the proposed `package` configuration for functions
            obj[fnKey] = __assign({}, fnCfg, { name: fnKey, package: __assign({}, (fnCfg.package || {}), (_this.config.functions[fnKey] || {}), { include: include,
                    exclude: exclude }) });
            return obj;
        }, {});
        this.hooks = {
            'before:offline:start': function () {
                if (!_this.config.useServerlessOffline) {
                    return null;
                }
                _this.config.noDeploy = true;
                _this.serverless.config.servicePath = _this.buildTmpDir;
                return _this.build();
            },
        };
        // hooks changed in 1.12 :/
        if (semver.gte(version, '1.12.0')) {
            this.overridePackagePlugin();
            this.hooks = __assign({ 'before:package:function:package': this.build, 'before:package:initialize': this.build, 'after:package:createDeploymentArtifacts': function () {
                    _this.serverless.service.package.artifact = null;
                } }, this.hooks);
        }
        else {
            this.hooks = __assign({ 'after:deploy:function:initialize': this.build, 'after:deploy:initialize': this.build, 'after:deploy:createDeploymentArtifacts': function () {
                    _this.serverless.service.package.artifact = null;
                } }, this.hooks);
        }
        this.fileBuild = new FileBuild_1.FileBuild({
            logger: this.logger,
            servicePath: this.servicePath,
            buildTmpDir: this.buildTmpDir,
            handlerEntryExt: this.config.handlerEntryExt,
            tryFiles: this.config.tryFiles,
        });
    }
    /**
     * Builds a function into an streaming zip artifact
     * and sets it in `serverless.yml:functions[fnName].artifact`
     * in order for `serverless` to consume it.
     */
    ServerlessBuildPlugin.prototype.buildFunction = function (fnName, fnConfig) {
        return __awaiter(this, void 0, void 0, function () {
            var moduleIncludes, method, artifact, sourceBundler, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        method = this.config.method;
                        artifact = Archiver('zip', this.config.zip);
                        this.logger.message('FUNCTION', c.reset.bold(fnName));
                        this.logger.log('');
                        if (!(method === 'bundle')) return [3 /*break*/, 2];
                        sourceBundler = new SourceBundler_1.SourceBundler({
                            uglify: this.config.uglifySource
                                ? this.config.uglify
                                : undefined,
                            babel: this.config.babel,
                            sourceMaps: this.config.sourceMaps,
                            transformExtensions: this.config.transformExtensions,
                            logger: this.logger,
                            archive: artifact,
                            servicePath: this.servicePath,
                        });
                        this.logger.log('');
                        return [4 /*yield*/, sourceBundler.bundle({
                                exclude: fnConfig.package.exclude,
                                include: fnConfig.package.include,
                            })];
                    case 1:
                        _a.sent();
                        return [3 /*break*/, 5];
                    case 2:
                        if (!(method === 'file')) return [3 /*break*/, 4];
                        //
                        // BUILD FILE
                        //
                        return [4 /*yield*/, this.fileBuild.build(fnConfig, artifact)];
                    case 3:
                        //
                        // BUILD FILE
                        //
                        _a.sent();
                        moduleIncludes = this.fileBuild.externals;
                        return [3 /*break*/, 5];
                    case 4: throw new Error('Unknown build method');
                    case 5:
                        this.logger.log('');
                        return [4 /*yield*/, new ModuleBundler_1.ModuleBundler({
                                logger: this.logger,
                                uglify: this.config.uglifyModules
                                    ? this.config.uglify
                                    : undefined,
                                servicePath: this.servicePath,
                                archive: artifact,
                            }).bundle(__assign({ include: Array.from(moduleIncludes || []) }, this.config.modules))];
                    case 6:
                        _a.sent();
                        this.logger.log('');
                        return [4 /*yield*/, this.completeFunctionArtifact(fnName, artifact)];
                    case 7:
                        result = _a.sent();
                        this.logger.log('');
                        return [2 /*return*/, result];
                }
            });
        });
    };
    /**
     *  Writes the `artifact` and attaches it to serverless
     */
    ServerlessBuildPlugin.prototype.completeFunctionArtifact = function (fnName, artifact) {
        return __awaiter(this, void 0, void 0, function () {
            var artifactPath, size, fnConfig;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        artifactPath = path.resolve(this.artifactTmpDir, "./" + this.serverless.service.service + "-" + fnName + "-" + new Date().getTime() + ".zip");
                        return [4 /*yield*/, new Promise(function (resolve, reject) {
                                var stream = fs_extra_1.createWriteStream(artifactPath);
                                stream
                                    .on('error', reject)
                                    .on('close', resolve);
                                artifact.pipe(stream);
                                artifact.finalize();
                            })];
                    case 1:
                        _a.sent();
                        size = (artifact.pointer() / 1024 / 1024).toFixed(4) + " MB";
                        this.logger.message('ARTIFACT', c.bold(fnName) + " " + c.blue(size));
                        fnConfig = this.serverless.service.functions[fnName];
                        fnConfig.artifact = artifactPath;
                        fnConfig.package = fnConfig.package || {};
                        fnConfig.package.artifact = artifactPath;
                        return [2 /*return*/, fnConfig];
                }
            });
        });
    };
    return ServerlessBuildPlugin;
}());
exports.ServerlessBuildPlugin = ServerlessBuildPlugin;
//# sourceMappingURL=ServerlessBuildPlugin.js.map