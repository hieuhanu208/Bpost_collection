/// <reference types="archiver" />
import { Archiver } from 'archiver';
import { Logger } from './lib/Logger';
/**
 *  @class SourceBundler
 *
 *  Handles the inclusion of source code in the artifact.
 */
export declare class SourceBundler {
    logger: Logger;
    archive: Archiver;
    servicePath: string;
    babel: any;
    uglify: any;
    sourceMaps: boolean;
    transformExtensions: string[];
    constructor(config: {
        logger: Logger;
        archive: Archiver;
        servicePath: string;
        babel?: any;
        uglify?: any;
        sourceMaps?: boolean;
        transformExtensions?: string[];
    });
    /**
     *  Walks through, transforms, and zips source content wich
     *  is both `included` and not `excluded` by the regex or glob patterns.
     */
    bundle({exclude, include}: {
        exclude?: undefined[];
        include?: undefined[];
    }): Promise<Archiver>;
    private createTransforms();
}
