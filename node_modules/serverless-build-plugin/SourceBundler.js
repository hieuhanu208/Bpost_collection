"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var fs_extra_1 = require("fs-extra");
var lutils_1 = require("lutils");
var glob = require("minimatch");
var path_1 = require("path");
var utils_1 = require("./lib/utils");
var Walker_1 = require("./lib/Walker");
var Babel_1 = require("./transforms/Babel");
var Uglify_1 = require("./transforms/Uglify");
/**
 *  @class SourceBundler
 *
 *  Handles the inclusion of source code in the artifact.
 */
var SourceBundler = (function () {
    function SourceBundler(config) {
        this.sourceMaps = false;
        this.transformExtensions = ['ts', 'js', 'jsx', 'tsx'];
        Object.assign(this, config);
    }
    /**
     *  Walks through, transforms, and zips source content wich
     *  is both `included` and not `excluded` by the regex or glob patterns.
     */
    SourceBundler.prototype.bundle = function (_a) {
        var _b = _a.exclude, exclude = _b === void 0 ? [] : _b, _c = _a.include, include = _c === void 0 ? [] : _c;
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var transforms, onFile;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.createTransforms()];
                    case 1:
                        transforms = _a.sent();
                        onFile = function (filePath, stats, stop) { return __awaiter(_this, void 0, void 0, function () {
                            var relPath, testPattern, isIncluded, isExcluded;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        relPath = path_1.join(filePath.split(this.servicePath)[1]).replace(/^\/|\/$/g, '');
                                        testPattern = function (pattern) { return (lutils_1.isRegExp(pattern)
                                            ? pattern.test(relPath)
                                            : glob(relPath, pattern, { dot: true })); };
                                        isIncluded = include.some(testPattern);
                                        isExcluded = exclude.some(testPattern);
                                        /**
                                         *  When a pattern matches an exclude, it skips
                                         *  When a pattern doesnt match an include, it skips
                                         */
                                        if (!isIncluded || isExcluded) {
                                            return [2 /*return*/];
                                        }
                                        return [4 /*yield*/, utils_1.handleFile({
                                                filePath: filePath,
                                                relPath: relPath,
                                                transforms: transforms,
                                                transformExtensions: this.transformExtensions,
                                                useSourceMaps: this.sourceMaps,
                                                archive: this.archive,
                                            })];
                                    case 1:
                                        _a.sent();
                                        this.logger.source({ filePath: relPath });
                                        return [2 /*return*/];
                                }
                            });
                        }); };
                        return [4 /*yield*/, new Walker_1.Walker(this.servicePath)
                                .filter(function (dir) { return !/\/node_modules\//i.test(dir); })
                                .file(onFile)
                                .end()];
                    case 2:
                        _a.sent();
                        return [2 /*return*/, this.archive];
                }
            });
        });
    };
    SourceBundler.prototype.createTransforms = function () {
        return __awaiter(this, void 0, void 0, function () {
            var transforms, babelQuery, babelrcPath, _a, _b, _c, uglifyConfig;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        transforms = [];
                        if (!this.babel) return [3 /*break*/, 5];
                        babelQuery = this.babel;
                        if (!!lutils_1.isObject(babelQuery)) return [3 /*break*/, 4];
                        babelrcPath = path_1.join(this.servicePath, '.babelrc');
                        if (!fs_extra_1.existsSync(babelrcPath)) return [3 /*break*/, 2];
                        _c = (_b = JSON).parse;
                        return [4 /*yield*/, fs_extra_1.readFile(babelrcPath, 'utf8')];
                    case 1:
                        _a = _c.apply(_b, [_d.sent()]);
                        return [3 /*break*/, 3];
                    case 2:
                        _a = {};
                        _d.label = 3;
                    case 3:
                        babelQuery = _a;
                        _d.label = 4;
                    case 4:
                        // If `sourceMaps` are switched off by the plugin's configuration,
                        // ensure that is passed down to the babel transformer too.
                        if (this.sourceMaps === false) {
                            babelQuery.sourceMaps = false;
                        }
                        transforms.push(new Babel_1.BabelTransform(babelQuery, this));
                        _d.label = 5;
                    case 5:
                        uglifyConfig = this.uglify;
                        if (uglifyConfig) {
                            if (!lutils_1.isObject(uglifyConfig)) {
                                uglifyConfig = null;
                            }
                            transforms.push(new Uglify_1.UglifyTransform(uglifyConfig, { servicePath: this.servicePath, logErrors: true }));
                        }
                        return [2 /*return*/, transforms];
                }
            });
        });
    };
    return SourceBundler;
}());
exports.SourceBundler = SourceBundler;
//# sourceMappingURL=SourceBundler.js.map