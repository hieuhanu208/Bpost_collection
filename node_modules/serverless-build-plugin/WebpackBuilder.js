"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var lutils_1 = require("lutils");
var requireResolve = require("resolve-pkg");
var WebpackBuilder = (function () {
    function WebpackBuilder(config) {
        this.entryCache = new Set();
        this.cache = true;
        Object.assign(this, config);
        try {
            // eslint-disable-next-line
            this.webpack = require(requireResolve('webpack', { cwd: this.servicePath }));
        }
        catch (err) { }
    }
    /**
     *  Builds a webpack config into the build directory.
     */
    WebpackBuilder.prototype.build = function (config) {
        return __awaiter(this, void 0, void 0, function () {
            var entry, cacheKey, externals, logs;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        entry = config.entry || [];
                        if (entry.length) {
                            cacheKey = entry.join('');
                            if (this.entryCache.has(cacheKey)) {
                                return [2 /*return*/];
                            }
                            this.entryCache.add(cacheKey);
                        }
                        config.context = this.servicePath;
                        config.entry = __spread(entry);
                        config.output = __assign({}, config.output, { libraryTarget: 'commonjs', path: this.buildTmpDir });
                        externals = this.normalizeExternals(config.externals || []);
                        this.logger.message('WEBPACK');
                        this.logger.log('');
                        return [4 /*yield*/, this.runWebpack(config)];
                    case 1:
                        logs = _a.sent();
                        this.logger.log('');
                        this.logger.block('WEBPACK', logs);
                        return [2 /*return*/, externals];
                }
            });
        });
    };
    /**
     *  Normalizes webpacks externals into an array of strings.
     *  This is fairly rough, could be better.
     *
     *  @return [ "moduleName" ]
     */
    WebpackBuilder.prototype.normalizeExternals = function (externals) {
        return externals.reduce(function (arr, external) {
            var type = lutils_1.typeOf(external);
            if (type === 'string') {
                arr.push(external);
            }
            else if (type === 'object') {
                Object.keys(external).forEach(function (key) {
                    var val = external[key];
                    if (val === true) {
                        arr.push(key);
                    }
                });
            }
            return arr;
        }, []);
    };
    WebpackBuilder.prototype.runWebpack = function (config) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.webpack(config).run(function (err, stats) {
                if (err) {
                    return reject(err);
                }
                return resolve(stats.toString({
                    colors: true,
                    hash: false,
                    version: false,
                    chunks: false,
                    children: false,
                }));
            });
        });
    };
    return WebpackBuilder;
}());
exports.WebpackBuilder = WebpackBuilder;
//# sourceMappingURL=WebpackBuilder.js.map