"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var bluebird_1 = require("bluebird");
var c = require("chalk");
var getFolderSize = require("get-folder-size");
var path = require("path");
var util_1 = require("util");
var indent = function (str) { return str.split('\n').map(function (line) { return "  " + line; }).join('\n'); };
var getFolderSizeAsync = bluebird_1.promisify(getFolderSize);
/** Returns size in MB */
var directorySize = function (directory) { return __awaiter(_this, void 0, void 0, function () {
    var size, err_1;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                _a.trys.push([0, 2, , 3]);
                return [4 /*yield*/, getFolderSizeAsync(directory)];
            case 1:
                size = _a.sent();
                return [2 /*return*/, (size / 1024 / 1024).toFixed(3) + " MB"];
            case 2:
                err_1 = _a.sent();
                return [2 /*return*/, null];
            case 3: return [2 /*return*/];
        }
    });
}); };
var Logger = (function () {
    function Logger(_a) {
        var _b = _a === void 0 ? {} : _a, serverless = _b.serverless, _c = _b.silent, silent = _c === void 0 ? false : _c;
        var _this = this;
        this.log = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return !_this.silent && console.log.apply(console, args);
        };
        this.logSls = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return !_this.silent && (_a = _this.serverless.cli).log.apply(_a, __spread(args));
            var _a;
        };
        Object.assign(this, { serverless: serverless, silent: silent });
    }
    Logger.prototype.message = function (prefix, str) {
        if (str === void 0) { str = ''; }
        return this.log(c.grey("[" + prefix + "]") + " " + str);
    };
    Logger.prototype.module = function (_a) {
        var filePath = _a.filePath, realPath = _a.realPath, packageJson = _a.packageJson;
        return __awaiter(this, void 0, void 0, function () {
            var directory, size;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        directory = path.basename(filePath);
                        return [4 /*yield*/, directorySize(realPath || filePath)];
                    case 1:
                        size = _a.sent();
                        return [2 /*return*/, this.message('MODULE', "" + (packageJson && c.grey(packageJson.version + "\t")) + c.grey(filePath
                                .replace(directory, c.reset(directory))
                                .replace(/\bnode_modules\b/, '~')) + " " + (size ? c.grey("- " + c.blue(size)) : ''))];
                }
            });
        });
    };
    Logger.prototype.source = function (_a) {
        var filePath = _a.filePath;
        var basename = path.basename(filePath);
        return this.message('SOURCE', c.grey(filePath.replace(basename, c.reset(basename))));
    };
    Logger.prototype.config = function (config) {
        var str = c.grey(util_1.inspect(config, { depth: 10, colors: true }));
        this.block('CONFIG', str);
    };
    Logger.prototype.block = function (prefix, text) {
        this.message(prefix);
        this.log('');
        this.log(indent(text));
        this.log('');
    };
    return Logger;
}());
exports.Logger = Logger;
//# sourceMappingURL=Logger.js.map