"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var Bluebird = require("bluebird");
var fs_extra_1 = require("fs-extra");
var path_1 = require("path");
var createWalker = require("walker");
var Walker = (function () {
    function Walker(directory) {
        var _this = this;
        this.pending = [];
        this.symlinkRoots = new Set();
        this.capture = function (fn) {
            return function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                var result = fn.apply(void 0, __spread(args));
                _this.pending.push(result);
                return result;
            };
        };
        this.walker = createWalker(directory);
    }
    Walker.prototype.filter = function (fn) {
        this.walker.filterDir(this.capture(fn));
        return this;
    };
    Walker.prototype.directory = function (fn) {
        this.walker.on('dir', this.capture(fn));
        return this;
    };
    Walker.prototype.file = function (fn) {
        this.walker.on('file', this.capture(fn));
        return this;
    };
    Walker.prototype.end = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, new Promise(function (resolve, reject) {
                            _this.walker.on('error', reject);
                            _this.walker.on('end', resolve);
                        })];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, Promise.all(this.pending)];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    return Walker;
}());
exports.Walker = Walker;
function findSymlinks(dirPath, maxDepth) {
    if (maxDepth === void 0) { maxDepth = 2; }
    return __awaiter(this, void 0, void 0, function () {
        var _this = this;
        var links, traverse;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    links = new Map();
                    traverse = function (dir, depth) { return __awaiter(_this, void 0, void 0, function () {
                        var stats, real, entries;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    if (depth < 0) {
                                        return [2 /*return*/];
                                    }
                                    --depth;
                                    return [4 /*yield*/, fs_extra_1.lstat(dir)];
                                case 1:
                                    stats = _a.sent();
                                    if (!stats.isSymbolicLink()) return [3 /*break*/, 3];
                                    return [4 /*yield*/, fs_extra_1.realpath(dir)];
                                case 2:
                                    real = _a.sent();
                                    return [2 /*return*/, links.set(real, dir)];
                                case 3:
                                    if (!stats.isDirectory()) {
                                        return [2 /*return*/];
                                    }
                                    return [4 /*yield*/, fs_extra_1.readdir(dir)];
                                case 4:
                                    entries = _a.sent();
                                    return [2 /*return*/, Bluebird.map(entries, function (entry) {
                                            return traverse(path_1.join(dir, entry), depth);
                                        })];
                            }
                        });
                    }); };
                    return [4 /*yield*/, traverse(dirPath, maxDepth)];
                case 1:
                    _a.sent();
                    return [2 /*return*/, links];
            }
        });
    });
}
exports.findSymlinks = findSymlinks;
//# sourceMappingURL=Walker.js.map