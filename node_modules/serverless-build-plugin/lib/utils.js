"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var c = require("chalk");
var fs_extra_1 = require("fs-extra");
var YAML = require("js-yaml");
var lutils_1 = require("lutils");
var path = require("path");
/**
 * Read any of:
 * - .json
 * - .yml / .yaml
 * - .js
 *
 * @param {String} fileLookup
 * @returns {any} config
 */
function loadFile(fileLookup) {
    var tryExts = ['.yml', '.yaml', ''];
    try {
        for (var tryExts_1 = __values(tryExts), tryExts_1_1 = tryExts_1.next(); !tryExts_1_1.done; tryExts_1_1 = tryExts_1.next()) {
            var ext = tryExts_1_1.value;
            try {
                var filePath = require.resolve("" + fileLookup + ext);
                if (/\.ya?ml$/i.test(filePath)) {
                    return YAML.load(fs_extra_1.readFileSync(filePath, 'utf8'));
                }
                return require(filePath); // eslint-disable-line
            }
            catch (err) { }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (tryExts_1_1 && !tryExts_1_1.done && (_a = tryExts_1.return)) _a.call(tryExts_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return null;
    var e_1, _a;
}
exports.loadFile = loadFile;
/**
 *  Normalizes transforming and zip allocation for walked files.
 *  Used by SourceBundler & ModuleBundler.
 */
function handleFile(_a) {
    var filePath = _a.filePath, relPath = _a.relPath, archive = _a.archive, useSourceMaps = _a.useSourceMaps, transformExtensions = _a.transformExtensions, transforms = _a.transforms;
    return __awaiter(this, void 0, void 0, function () {
        var extname, isTransformable, code, map, destRelPath, transforms_1, transforms_1_1, transformer, result, e_2, _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    extname = path.extname(filePath);
                    isTransformable = transformExtensions.some(function (ext) { return "." + ext === extname.toLowerCase(); });
                    if (!isTransformable) return [3 /*break*/, 2];
                    return [4 /*yield*/, fs_extra_1.readFile(filePath, 'utf8')];
                case 1:
                    code = _b.sent();
                    map = '';
                    destRelPath = relPath;
                    /**
                     *  Runs transforms against the code, mutating the code & map
                     *  with each iteration, optionally producing source maps
                     */
                    if (transforms.length) {
                        try {
                            for (transforms_1 = __values(transforms), transforms_1_1 = transforms_1.next(); !transforms_1_1.done; transforms_1_1 = transforms_1.next()) {
                                transformer = transforms_1_1.value;
                                result = transformer.run({ code: code, map: map, filePath: filePath, relPath: relPath });
                                if (result.code) {
                                    code = result.code;
                                    if (result.map) {
                                        map = result.map;
                                    }
                                    if (result.relPath) {
                                        destRelPath = result.relPath;
                                    }
                                }
                            }
                        }
                        catch (e_2_1) { e_2 = { error: e_2_1 }; }
                        finally {
                            try {
                                if (transforms_1_1 && !transforms_1_1.done && (_a = transforms_1.return)) _a.call(transforms_1);
                            }
                            finally { if (e_2) throw e_2.error; }
                        }
                    }
                    archive.append(new Buffer(code), { name: destRelPath });
                    if (useSourceMaps && map) {
                        if (lutils_1.isObject(map)) {
                            map = JSON.stringify(map);
                        }
                        archive.append(new Buffer(map), { name: destRelPath + ".map" });
                    }
                    return [3 /*break*/, 3];
                case 2:
                    //
                    // ARBITRARY FILES
                    //
                    archive.file(filePath, { name: relPath });
                    _b.label = 3;
                case 3: return [2 /*return*/, archive];
            }
        });
    });
}
exports.handleFile = handleFile;
function displayModule(_a) {
    var filePath = _a.filePath, packageJson = _a.packageJson;
    var basename = path.basename(filePath);
    return "" + (packageJson && c.grey(packageJson.version + "\t")) + c.grey(filePath.replace(basename, "" + c.reset(basename)));
}
exports.displayModule = displayModule;
function colorizeConfig(config) {
    return c.grey("{ " + Object.keys(config).map(function (key) {
        var val = config[key];
        return c.white(key) + ": " + (val ? c.green(val) : c.yellow(val));
    }).join(', ') + " }");
}
exports.colorizeConfig = colorizeConfig;
//# sourceMappingURL=utils.js.map